
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00002f38  00002fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800198  00800198  00003104  2**0
                  ALLOC
  3 .stab         00002c1c  00000000  00000000  00003104  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c2  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007182  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000977f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ab05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000be9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c192  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e3       	ldi	r30, 0x38	; 56
     162:	ff e2       	ldi	r31, 0x2F	; 47
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 39       	cpi	r26, 0x98	; 152
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 e9       	ldi	r26, 0x98	; 152
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ab 39       	cpi	r26, 0x9B	; 155
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <main>
     184:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	aa e8       	ldi	r26, 0x8A	; 138
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e8       	ldi	r24, 0x8A	; 138
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6a e8       	ldi	r22, 0x8A	; 138
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ee 56       	subi	r30, 0x6E	; 110
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <Buzzer_init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Function to initialize the BUZZER pin as output */
void Buzzer_init(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	63 e0       	ldi	r22, 0x03	; 3
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <Buzzer_on>:

/* Function to turn on BUZZER */
void Buzzer_on(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( BUZZER_PORT_ID ,  BUZZER_PIN_ID , LOGIC_HIGH);
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	63 e0       	ldi	r22, 0x03	; 3
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <Buzzer_off>:

/* Function to turn off BUZZER */
void Buzzer_off(void)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	63 e0       	ldi	r22, 0x03	; 3
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <FlameSensor_init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Configures the pin connected to the flame sensor*/
void FlameSensor_init(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	/* Set the flame sensor pin as input */
	GPIO_setupPinDirection(FLAME_PORT_ID , FLAME_PIN_ID , PIN_INPUT);
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	62 e0       	ldi	r22, 0x02	; 2
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <FlameSensor_getValue>:

/* This function reads and returns the current state of the flame sensor */
uint8 FlameSensor_getValue(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	uint8 value = 0;
     f92:	19 82       	std	Y+1, r1	; 0x01
	  /* Read the value from the flame sensor pin */
	value = GPIO_readPin( FLAME_PORT_ID , FLAME_PIN_ID );
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <GPIO_readPin>
     f9c:	89 83       	std	Y+1, r24	; 0x01

	return value;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <LDR_getLightIntensity>:
 * This function reads the analog value from the LDR sensor using the ADC,
 * converts the ADC value to voltage, and then converts the voltage to light intensity.
 * return The light intensity from the LDR sensor.
 */
uint16 LDR_getLightIntensity(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	2a 97       	sbiw	r28, 0x0a	; 10
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
	uint16 adc_value = 0;
     fbc:	1a 86       	std	Y+10, r1	; 0x0a
     fbe:	19 86       	std	Y+9, r1	; 0x09
	float32 voltage  = 0;
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e0       	ldi	r26, 0x00	; 0
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	af 83       	std	Y+7, r26	; 0x07
     fce:	b8 87       	std	Y+8, r27	; 0x08
	float32 light_intensity =0;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	ab 83       	std	Y+3, r26	; 0x03
     fde:	bc 83       	std	Y+4, r27	; 0x04

	/* Read ADC value */
	adc_value = ADC_readChannel(LDR_SENSOR_CHANNEL_ID);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	0e 94 91 0b 	call	0x1722	; 0x1722 <ADC_readChannel>
     fe6:	9a 87       	std	Y+10, r25	; 0x0a
     fe8:	89 87       	std	Y+9, r24	; 0x09
	/* Convert ADC value to voltage */
	voltage = ((float)adc_value / ADC_LDR_MAXIMUM_VALUE) * LDR_SENSOR_MAX_VOLT_VALUE;
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	cc 01       	movw	r24, r24
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 ec       	ldi	r19, 0xC0	; 192
    1008:	4f e7       	ldi	r20, 0x7F	; 127
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	37 ed       	ldi	r19, 0xD7	; 215
    101c:	43 e2       	ldi	r20, 0x23	; 35
    101e:	50 e4       	ldi	r21, 0x40	; 64
    1020:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	af 83       	std	Y+7, r26	; 0x07
    102e:	b8 87       	std	Y+8, r27	; 0x08
	/* Convert voltage to light intensity, scaling appropriately */
	light_intensity = (voltage / LDR_SENSOR_MAX_VOLT_VALUE) * LDR_SENSOR_MAX_LIGHT_INTENSITY;
    1030:	6d 81       	ldd	r22, Y+5	; 0x05
    1032:	7e 81       	ldd	r23, Y+6	; 0x06
    1034:	8f 81       	ldd	r24, Y+7	; 0x07
    1036:	98 85       	ldd	r25, Y+8	; 0x08
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	37 ed       	ldi	r19, 0xD7	; 215
    103c:	43 e2       	ldi	r20, 0x23	; 35
    103e:	50 e4       	ldi	r21, 0x40	; 64
    1040:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	48 ec       	ldi	r20, 0xC8	; 200
    1052:	52 e4       	ldi	r21, 0x42	; 66
    1054:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	ab 83       	std	Y+3, r26	; 0x03
    1062:	bc 83       	std	Y+4, r27	; 0x04

	return (uint16)light_intensity;
    1064:	69 81       	ldd	r22, Y+1	; 0x01
    1066:	7a 81       	ldd	r23, Y+2	; 0x02
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
}
    1074:	2a 96       	adiw	r28, 0x0a	; 10
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <LEDS_init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Function to initialize the LED pins as output */
void LEDS_init(void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	 /* Loop makes each LED pin as output */
	for (uint8 i = 0 ; i < NUM_OF_LEDS ; i++)
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <LEDS_init+0x2c>
	{
		GPIO_setupPinDirection(LED_PORT_ID , led_pins [i] , PIN_OUTPUT);
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	ee 56       	subi	r30, 0x6E	; 110
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	90 81       	ld	r25, Z
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	69 2f       	mov	r22, r25
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>

/* Function to initialize the LED pins as output */
void LEDS_init(void)
{
	 /* Loop makes each LED pin as output */
	for (uint8 i = 0 ; i < NUM_OF_LEDS ; i++)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	70 f3       	brcs	.-36     	; 0x1094 <LEDS_init+0xe>
	{
		GPIO_setupPinDirection(LED_PORT_ID , led_pins [i] , PIN_OUTPUT);
	}
}
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <led_on>:

/* Function to turn on a specific LED using ID */
void led_on(LED_ID id)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
		#ifdef POSTIVE_LOGIC
		{
		GPIO_writePin(LED_PORT_ID , led_pins [id] , LOGIC_HIGH);
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	fc 01       	movw	r30, r24
    10d4:	ee 56       	subi	r30, 0x6E	; 110
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	90 81       	ld	r25, Z
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	69 2f       	mov	r22, r25
    10de:	41 e0       	ldi	r20, 0x01	; 1
    10e0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
		#else
		{
		GPIO_writePin(LED_PORT_ID , led_pins [id] , LOGIC_LOW);
		}
		#endif
}
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <led_off>:

/* Function to turn off a specific LED using ID */
void led_off(LED_ID id)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
		#ifdef POSTIVE_LOGIC
		{
		GPIO_writePin(LED_PORT_ID , led_pins [id] , LOGIC_LOW);
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	ee 56       	subi	r30, 0x6E	; 110
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	90 81       	ld	r25, Z
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	69 2f       	mov	r22, r25
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
		#else
		{
		GPIO_writePin(LED_PORT_ID , led_pins [id] , LOGIC_HIGH);
		}
		#endif
}
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <Initialization>:
 * Initialize the LCD
 * Initialize the DC Motor
 * Initialize the ADC module
 */
void Initialization (void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	2b 97       	sbiw	r28, 0x0b	; 11
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the LEDs by setting up their pins as output */
	LEDS_init();
    112c:	0e 94 43 08 	call	0x1086	; 0x1086 <LEDS_init>
	/* Initialize the LCD for displaying information */
	LCD_init();
    1130:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_init>
	/* Initialize the DC Motor by setting the motor pins as output and turning it off */
	DcMotor_Init();
    1134:	0e 94 99 0a 	call	0x1532	; 0x1532 <DcMotor_Init>
	/* Display initial static text on the LCD */
	LCD_displayStringRowColumn(0,0,"Fan is ");
    1138:	20 e6       	ldi	r18, 0x60	; 96
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Temp=");
    1146:	28 e6       	ldi	r18, 0x68	; 104
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,9,"LDR=");
    1154:	2e e6       	ldi	r18, 0x6E	; 110
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	69 e0       	ldi	r22, 0x09	; 9
    115c:	a9 01       	movw	r20, r18
    115e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>

	/* Configure the ADC module for temperature and light readings */
	ADMUX_ConfigType  Ptr1  = { Right , INTERNAL } ;
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	8a 83       	std	Y+2, r24	; 0x02
	ADCSRA_ConfigType Ptr2  = { F_CPU_128 , Disable , Disable } ;
    1168:	ce 01       	movw	r24, r28
    116a:	03 96       	adiw	r24, 0x03	; 3
    116c:	98 87       	std	Y+8, r25	; 0x08
    116e:	8f 83       	std	Y+7, r24	; 0x07
    1170:	e5 e9       	ldi	r30, 0x95	; 149
    1172:	f1 e0       	ldi	r31, 0x01	; 1
    1174:	fa 87       	std	Y+10, r31	; 0x0a
    1176:	e9 87       	std	Y+9, r30	; 0x09
    1178:	f3 e0       	ldi	r31, 0x03	; 3
    117a:	fb 87       	std	Y+11, r31	; 0x0b
    117c:	e9 85       	ldd	r30, Y+9	; 0x09
    117e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1180:	00 80       	ld	r0, Z
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	9a 87       	std	Y+10, r25	; 0x0a
    118a:	89 87       	std	Y+9, r24	; 0x09
    118c:	ef 81       	ldd	r30, Y+7	; 0x07
    118e:	f8 85       	ldd	r31, Y+8	; 0x08
    1190:	00 82       	st	Z, r0
    1192:	8f 81       	ldd	r24, Y+7	; 0x07
    1194:	98 85       	ldd	r25, Y+8	; 0x08
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	98 87       	std	Y+8, r25	; 0x08
    119a:	8f 83       	std	Y+7, r24	; 0x07
    119c:	9b 85       	ldd	r25, Y+11	; 0x0b
    119e:	91 50       	subi	r25, 0x01	; 1
    11a0:	9b 87       	std	Y+11, r25	; 0x0b
    11a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    11a4:	ee 23       	and	r30, r30
    11a6:	51 f7       	brne	.-44     	; 0x117c <Initialization+0x64>
	SFIOR_ConfigType  Ptr3  = { Free_Run } ;
    11a8:	1e 82       	std	Y+6, r1	; 0x06
	ADC_init( &Ptr1 , &Ptr2 , &Ptr3 );
    11aa:	9e 01       	movw	r18, r28
    11ac:	2d 5f       	subi	r18, 0xFD	; 253
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	ae 01       	movw	r20, r28
    11b2:	4a 5f       	subi	r20, 0xFA	; 250
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	ce 01       	movw	r24, r28
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	b9 01       	movw	r22, r18
    11bc:	0e 94 21 0b 	call	0x1642	; 0x1642 <ADC_init>

}
    11c0:	2b 96       	adiw	r28, 0x0b	; 11
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <Display_Temp_and_LDR>:

/*
 * Function to display the temperature and LDR (light sensor) values on the LCD
 */
void Display_Temp_and_LDR (void)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	Temp = LM35_getTemperature();
    11da:	0e 94 5f 14 	call	0x28be	; 0x28be <LM35_getTemperature>
    11de:	80 93 98 01 	sts	0x0198, r24

	/* Display the temperature value every time at same position */
	LCD_moveCursor(1,5);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	65 e0       	ldi	r22, 0x05	; 5
    11e6:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_moveCursor>
	if(Temp >= 100)
    11ea:	80 91 98 01 	lds	r24, 0x0198
    11ee:	84 36       	cpi	r24, 0x64	; 100
    11f0:	38 f0       	brcs	.+14     	; 0x1200 <Display_Temp_and_LDR+0x2e>
	{
		LCD_intgerToString(Temp);
    11f2:	80 91 98 01 	lds	r24, 0x0198
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_intgerToString>
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <Display_Temp_and_LDR+0x40>
	}
	else
	{
		LCD_intgerToString(Temp);
    1200:	80 91 98 01 	lds	r24, 0x0198
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_intgerToString>
		/* In case the digital value is two or one digits print space in the next digit place */
		LCD_displayCharacter(' ');
    120c:	80 e2       	ldi	r24, 0x20	; 32
    120e:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
	}

	LDR = LDR_getLightIntensity();
    1212:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <LDR_getLightIntensity>
    1216:	80 93 99 01 	sts	0x0199, r24
	LCD_moveCursor(1,13);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	6d e0       	ldi	r22, 0x0D	; 13
    121e:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_moveCursor>
	if(LDR >= 100)
    1222:	80 91 99 01 	lds	r24, 0x0199
    1226:	84 36       	cpi	r24, 0x64	; 100
    1228:	38 f0       	brcs	.+14     	; 0x1238 <Display_Temp_and_LDR+0x66>
	{
		LCD_intgerToString(LDR);
    122a:	80 91 99 01 	lds	r24, 0x0199
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_intgerToString>
    1236:	09 c0       	rjmp	.+18     	; 0x124a <Display_Temp_and_LDR+0x78>
	}
	else
	{
		LCD_intgerToString(LDR);
    1238:	80 91 99 01 	lds	r24, 0x0199
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_intgerToString>
		/* In case the digital value is two or one digits print space in the next digit place */
		LCD_displayCharacter(' ');
    1244:	80 e2       	ldi	r24, 0x20	; 32
    1246:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
	}
}
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <Automatic_Lighting_Control>:
 * Intensity 16–50%: Red and Green LEDs turn ON.
 * Intensity 51–70%: Only the Red LED turns ON.
 * Intensity > 70%: All LEDs are turned OFF.
 */
void  Automatic_Lighting_Control (void)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62

	if(LDR <= 15)
    1258:	80 91 99 01 	lds	r24, 0x0199
    125c:	80 31       	cpi	r24, 0x10	; 16
    125e:	50 f4       	brcc	.+20     	; 0x1274 <Automatic_Lighting_Control+0x24>
	{
		led_on(PIN0);  /* RED   */
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0e 94 60 08 	call	0x10c0	; 0x10c0 <led_on>
		led_on(PIN1);  /* GREEN */
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 60 08 	call	0x10c0	; 0x10c0 <led_on>
		led_on(PIN2);  /* BLUE  */
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <led_on>
    1272:	31 c0       	rjmp	.+98     	; 0x12d6 <Automatic_Lighting_Control+0x86>
	}
	else if(LDR >= 16 && LDR <= 50)
    1274:	80 91 99 01 	lds	r24, 0x0199
    1278:	80 31       	cpi	r24, 0x10	; 16
    127a:	70 f0       	brcs	.+28     	; 0x1298 <Automatic_Lighting_Control+0x48>
    127c:	80 91 99 01 	lds	r24, 0x0199
    1280:	83 33       	cpi	r24, 0x33	; 51
    1282:	50 f4       	brcc	.+20     	; 0x1298 <Automatic_Lighting_Control+0x48>
	{
		led_on(PIN0);  /* RED   */
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 60 08 	call	0x10c0	; 0x10c0 <led_on>
		led_on(PIN1);  /* GREEN */
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <led_on>
		led_off(PIN2); /* BLUE  */
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
    1296:	1f c0       	rjmp	.+62     	; 0x12d6 <Automatic_Lighting_Control+0x86>
	}
	else if(LDR >= 51 && LDR <= 70)
    1298:	80 91 99 01 	lds	r24, 0x0199
    129c:	83 33       	cpi	r24, 0x33	; 51
    129e:	70 f0       	brcs	.+28     	; 0x12bc <Automatic_Lighting_Control+0x6c>
    12a0:	80 91 99 01 	lds	r24, 0x0199
    12a4:	87 34       	cpi	r24, 0x47	; 71
    12a6:	50 f4       	brcc	.+20     	; 0x12bc <Automatic_Lighting_Control+0x6c>
	{
		led_on(PIN0);  /* RED   */
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <led_on>
		led_off(PIN1); /* GREEN */
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
		led_off(PIN2); /* BLUE  */
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <Automatic_Lighting_Control+0x86>
	}
	else if(LDR >= 71)
    12bc:	80 91 99 01 	lds	r24, 0x0199
    12c0:	87 34       	cpi	r24, 0x47	; 71
    12c2:	48 f0       	brcs	.+18     	; 0x12d6 <Automatic_Lighting_Control+0x86>
	{
		led_off(PIN0); /* RED   */
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
		led_off(PIN1); /* GREEN */
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
		led_off(PIN2); /* BLUE  */
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
	}
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <Automatic_Fan_Speed_Control>:
 * Temperature ≥ 30°C and < 35°C: Fan ON at 50% speed.
 * Temperature ≥ 25°C and < 30°C: Fan ON at 25% speed.
 * Temperature < 25°C: Fan OFF.
 */
void  Automatic_Fan_Speed_Control (void)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	if(Temp < 25)
    12e4:	80 91 98 01 	lds	r24, 0x0198
    12e8:	89 31       	cpi	r24, 0x19	; 25
    12ea:	60 f4       	brcc	.+24     	; 0x1304 <Automatic_Fan_Speed_Control+0x28>
	{
		LCD_displayStringRowColumn(0,7,"OFF");
    12ec:	23 e7       	ldi	r18, 0x73	; 115
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	67 e0       	ldi	r22, 0x07	; 7
    12f4:	a9 01       	movw	r20, r18
    12f6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
		DcMotor_Rotate( CW , DUTY_CYCLE_0 );
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DcMotor_Rotate>
    1302:	57 c0       	rjmp	.+174    	; 0x13b2 <Automatic_Fan_Speed_Control+0xd6>
	}
	else if(Temp >= 25 && Temp < 30)
    1304:	80 91 98 01 	lds	r24, 0x0198
    1308:	89 31       	cpi	r24, 0x19	; 25
    130a:	98 f0       	brcs	.+38     	; 0x1332 <Automatic_Fan_Speed_Control+0x56>
    130c:	80 91 98 01 	lds	r24, 0x0198
    1310:	8e 31       	cpi	r24, 0x1E	; 30
    1312:	78 f4       	brcc	.+30     	; 0x1332 <Automatic_Fan_Speed_Control+0x56>
	{
		LCD_displayStringRowColumn(0,7,"ON");
    1314:	27 e7       	ldi	r18, 0x77	; 119
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	67 e0       	ldi	r22, 0x07	; 7
    131c:	a9 01       	movw	r20, r18
    131e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
		LCD_displayCharacter(' ');
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		DcMotor_Rotate( CW , DUTY_CYCLE_25 );
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	60 e4       	ldi	r22, 0x40	; 64
    132c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DcMotor_Rotate>
    1330:	40 c0       	rjmp	.+128    	; 0x13b2 <Automatic_Fan_Speed_Control+0xd6>
	}
	else if(Temp >= 30 && Temp < 35)
    1332:	80 91 98 01 	lds	r24, 0x0198
    1336:	8e 31       	cpi	r24, 0x1E	; 30
    1338:	98 f0       	brcs	.+38     	; 0x1360 <Automatic_Fan_Speed_Control+0x84>
    133a:	80 91 98 01 	lds	r24, 0x0198
    133e:	83 32       	cpi	r24, 0x23	; 35
    1340:	78 f4       	brcc	.+30     	; 0x1360 <Automatic_Fan_Speed_Control+0x84>
	{
		LCD_displayStringRowColumn(0,7,"ON");
    1342:	27 e7       	ldi	r18, 0x77	; 119
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	67 e0       	ldi	r22, 0x07	; 7
    134a:	a9 01       	movw	r20, r18
    134c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
		LCD_displayCharacter(' ');
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		DcMotor_Rotate( CW , DUTY_CYCLE_50 );
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	60 e8       	ldi	r22, 0x80	; 128
    135a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DcMotor_Rotate>
    135e:	29 c0       	rjmp	.+82     	; 0x13b2 <Automatic_Fan_Speed_Control+0xd6>
	}
	else if(Temp >= 35 && Temp < 40)
    1360:	80 91 98 01 	lds	r24, 0x0198
    1364:	83 32       	cpi	r24, 0x23	; 35
    1366:	98 f0       	brcs	.+38     	; 0x138e <Automatic_Fan_Speed_Control+0xb2>
    1368:	80 91 98 01 	lds	r24, 0x0198
    136c:	88 32       	cpi	r24, 0x28	; 40
    136e:	78 f4       	brcc	.+30     	; 0x138e <Automatic_Fan_Speed_Control+0xb2>
	{
		LCD_displayStringRowColumn(0,7,"ON");
    1370:	27 e7       	ldi	r18, 0x77	; 119
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	67 e0       	ldi	r22, 0x07	; 7
    1378:	a9 01       	movw	r20, r18
    137a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
		LCD_displayCharacter(' ');
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		DcMotor_Rotate( CW , DUTY_CYCLE_75 );
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	60 ec       	ldi	r22, 0xC0	; 192
    1388:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DcMotor_Rotate>
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <Automatic_Fan_Speed_Control+0xd6>
	}
	else if(Temp >= 40)
    138e:	80 91 98 01 	lds	r24, 0x0198
    1392:	88 32       	cpi	r24, 0x28	; 40
    1394:	70 f0       	brcs	.+28     	; 0x13b2 <Automatic_Fan_Speed_Control+0xd6>
	{
		LCD_displayStringRowColumn(0,7,"ON");
    1396:	27 e7       	ldi	r18, 0x77	; 119
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	67 e0       	ldi	r22, 0x07	; 7
    139e:	a9 01       	movw	r20, r18
    13a0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
		LCD_displayCharacter(' ');
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		DcMotor_Rotate( CW , MAX_DUTY_CYCLE_100 );
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	6f ef       	ldi	r22, 0xFF	; 255
    13ae:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DcMotor_Rotate>
	}

}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <Fire_Detection_and_Alert>:
 * Function to detect fire using a flame sensor and trigger an alert system.
 * It displays an alert message on the LCD and activates a buzzer when fire is detected.
 * The system remains in alert mode until the flame is no longer detected, then it resets the display.
 */
void Fire_Detection_and_Alert(void)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2e 97       	sbiw	r28, 0x0e	; 14
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
	/* Clear the LCD and display the alert message */
	LCD_clearScreen();
    13cc:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_moveCursor>
	LCD_displayString("Critical alert!");
    13d8:	8a e7       	ldi	r24, 0x7A	; 122
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_displayString>

	/* Turn on the buzzer */
	Buzzer_on();
    13e0:	0e 94 a0 07 	call	0xf40	; 0xf40 <Buzzer_on>
    13e4:	7f c0       	rjmp	.+254    	; 0x14e4 <Fire_Detection_and_Alert+0x12c>

	/* Continuously check the flame sensor until the flame is gone */
	while (FlameSensor_getValue() == 1)
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a8 ec       	ldi	r26, 0xC8	; 200
    13ec:	b2 e4       	ldi	r27, 0x42	; 66
    13ee:	8b 87       	std	Y+11, r24	; 0x0b
    13f0:	9c 87       	std	Y+12, r25	; 0x0c
    13f2:	ad 87       	std	Y+13, r26	; 0x0d
    13f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a e7       	ldi	r20, 0x7A	; 122
    1404:	55 e4       	ldi	r21, 0x45	; 69
    1406:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	8f 83       	std	Y+7, r24	; 0x07
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	a9 87       	std	Y+9, r26	; 0x09
    1414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1416:	6f 81       	ldd	r22, Y+7	; 0x07
    1418:	78 85       	ldd	r23, Y+8	; 0x08
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    142a:	88 23       	and	r24, r24
    142c:	2c f4       	brge	.+10     	; 0x1438 <Fire_Detection_and_Alert+0x80>
		__ticks = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	3f c0       	rjmp	.+126    	; 0x14b6 <Fire_Detection_and_Alert+0xfe>
	else if (__tmp > 65535)
    1438:	6f 81       	ldd	r22, Y+7	; 0x07
    143a:	78 85       	ldd	r23, Y+8	; 0x08
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	3f ef       	ldi	r19, 0xFF	; 255
    1444:	4f e7       	ldi	r20, 0x7F	; 127
    1446:	57 e4       	ldi	r21, 0x47	; 71
    1448:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    144c:	18 16       	cp	r1, r24
    144e:	4c f5       	brge	.+82     	; 0x14a2 <Fire_Detection_and_Alert+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1450:	6b 85       	ldd	r22, Y+11	; 0x0b
    1452:	7c 85       	ldd	r23, Y+12	; 0x0c
    1454:	8d 85       	ldd	r24, Y+13	; 0x0d
    1456:	9e 85       	ldd	r25, Y+14	; 0x0e
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e2       	ldi	r20, 0x20	; 32
    145e:	51 e4       	ldi	r21, 0x41	; 65
    1460:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <Fire_Detection_and_Alert+0xe0>
    147a:	80 e9       	ldi	r24, 0x90	; 144
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <Fire_Detection_and_Alert+0xce>
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	69 f7       	brne	.-38     	; 0x147a <Fire_Detection_and_Alert+0xc2>
    14a0:	14 c0       	rjmp	.+40     	; 0x14ca <Fire_Detection_and_Alert+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <Fire_Detection_and_Alert+0x10a>
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Add a small delay to avoid constant polling */
		_delay_ms(100);
		/*Turn off the led */
		led_off(PIN0); /* RED   */
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
		led_off(PIN1); /* GREEN */
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
		led_off(PIN2); /* BLUE  */
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	0e 94 76 08 	call	0x10ec	; 0x10ec <led_off>
		/* Stop te motor */
		DcMotor_Rotate( STOP , DUTY_CYCLE_0 );
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DcMotor_Rotate>

	/* Turn on the buzzer */
	Buzzer_on();

	/* Continuously check the flame sensor until the flame is gone */
	while (FlameSensor_getValue() == 1)
    14e4:	0e 94 c4 07 	call	0xf88	; 0xf88 <FlameSensor_getValue>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <Fire_Detection_and_Alert+0x136>
    14ec:	7c cf       	rjmp	.-264    	; 0x13e6 <Fire_Detection_and_Alert+0x2e>
		/* Stop te motor */
		DcMotor_Rotate( STOP , DUTY_CYCLE_0 );
	}

	/* Once the fire is no longer detected, turn off the buzzer and reset the display */
	Buzzer_off();
    14ee:	0e 94 ac 07 	call	0xf58	; 0xf58 <Buzzer_off>
	/* Clear the screen and restore the normal display */
	LCD_clearScreen();
    14f2:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Fan is ");
    14f6:	20 e6       	ldi	r18, 0x60	; 96
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	a9 01       	movw	r20, r18
    1500:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Temp=");
    1504:	28 e6       	ldi	r18, 0x68	; 104
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 9, "LDR=");
    1512:	2e e6       	ldi	r18, 0x6E	; 110
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	69 e0       	ldi	r22, 0x09	; 9
    151a:	a9 01       	movw	r20, r18
    151c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayStringRowColumn>
}
    1520:	2e 96       	adiw	r28, 0x0e	; 14
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <DcMotor_Init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Initializes the DC motor */
void DcMotor_Init(void)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_IN_PORT_ID,PIN0_ID,PIN_OUTPUT) ;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN_PORT_ID,PIN1_ID,PIN_OUTPUT) ;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_EN_PORT_ID ,MOTOR_EN_PIN_ID ,PIN_OUTPUT);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	63 e0       	ldi	r22, 0x03	; 3
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>

	/* Turn off the motor */
	GPIO_writePin(MOTOR_IN_PORT_ID, PIN0_ID, LOGIC_LOW);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN_PORT_ID, PIN1_ID, LOGIC_LOW);
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
}
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DcMotor_Rotate>:

/* state The desired state of the motor (STOP, CW, ACW).
 * Controls the DC motor's rotation and speed.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DcMotor_Rotate+0x6>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	6a 83       	std	Y+2, r22	; 0x02

		PWM_Timer0_Start(speed);
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	0e 94 05 0b 	call	0x160a	; 0x160a <PWM_Timer0_Start>

		if (state == CW)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 23       	and	r24, r24
    158a:	59 f4       	brne	.+22     	; 0x15a2 <DcMotor_Rotate+0x30>
		{
			/* Turn on the motor clock wise direction */

			GPIO_writePin(MOTOR_IN_PORT_ID, PIN0_ID, LOGIC_LOW);
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
			GPIO_writePin(MOTOR_IN_PORT_ID, PIN1_ID, LOGIC_HIGH);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    15a0:	1b c0       	rjmp	.+54     	; 0x15d8 <DcMotor_Rotate+0x66>

		}
		else if (state == ACW)
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	59 f4       	brne	.+22     	; 0x15be <DcMotor_Rotate+0x4c>
		{
			/* Turn on the motor anti clock wise direction */
			GPIO_writePin(MOTOR_IN_PORT_ID, PIN0_ID, LOGIC_HIGH);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
			GPIO_writePin(MOTOR_IN_PORT_ID, PIN1_ID, LOGIC_LOW);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    15bc:	0d c0       	rjmp	.+26     	; 0x15d8 <DcMotor_Rotate+0x66>

		}
		else if (state == STOP)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	51 f4       	brne	.+20     	; 0x15d8 <DcMotor_Rotate+0x66>
		{
			/* Turn off the motor */
			GPIO_writePin(MOTOR_IN_PORT_ID, PIN0_ID, LOGIC_LOW);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
			GPIO_writePin(MOTOR_IN_PORT_ID, PIN1_ID, LOGIC_LOW);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>

		}

}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <main>:
/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/

int main (void)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the LEDs
	 * Initialize the LCD
	 * Initialize the DC Motor
	 * Initialize the ADC module
	 */
	Initialization ();
    15ea:	0e 94 8c 08 	call	0x1118	; 0x1118 <Initialization>

	while(1)
	{

		if(  FlameSensor_getValue()  == 1 )
    15ee:	0e 94 c4 07 	call	0xf88	; 0xf88 <FlameSensor_getValue>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	19 f4       	brne	.+6      	; 0x15fc <main+0x1a>
			/*
			 * Function to detect fire using a flame sensor and trigger an alert system.
			 * It displays an alert message on the LCD and activates a buzzer when fire is detected.
			 * The system remains in alert mode until the flame is no longer detected, then it resets the display.
			 */
			Fire_Detection_and_Alert () ;
    15f6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Fire_Detection_and_Alert>
    15fa:	f9 cf       	rjmp	.-14     	; 0x15ee <main+0xc>
		else
		{
			/*
			 * Function to display the temperature and LDR (light sensor) values on the LCD
			 */
			Display_Temp_and_LDR ();
    15fc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <Display_Temp_and_LDR>
			 * Intensity < 15%: All 3 LEDs (Red, Green, and Blue) turn ON.
			 * Intensity 16–50%: Red and Green LEDs turn ON.
			 * Intensity 51–70%: Only the Red LED turns ON.
			 * Intensity > 70%: All LEDs are turned OFF.
			 */
			Automatic_Lighting_Control ();
    1600:	0e 94 28 09 	call	0x1250	; 0x1250 <Automatic_Lighting_Control>
			 * Temperature ≥ 35°C and < 40°C: Fan ON at 75% speed.
			 * Temperature ≥ 30°C and < 35°C: Fan ON at 50% speed.
			 * Temperature ≥ 25°C and < 30°C: Fan ON at 25% speed.
			 * Temperature < 25°C: Fan OFF.
			 */
			Automatic_Fan_Speed_Control ();
    1604:	0e 94 6e 09 	call	0x12dc	; 0x12dc <Automatic_Fan_Speed_Control>
    1608:	f2 cf       	rjmp	.-28     	; 0x15ee <main+0xc>

0000160a <PWM_Timer0_Start>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle)
 {
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
		TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1616:	e2 e5       	ldi	r30, 0x52	; 82
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	10 82       	st	Z, r1

	 	OCR0  = duty_cycle; /* Set Compare Value */
    161c:	ec e5       	ldi	r30, 0x5C	; 92
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	80 83       	st	Z, r24

	 	DDRB  |= (1<<PB3); /* Configure PB3/OC0 as output pin */
    1624:	a7 e3       	ldi	r26, 0x37	; 55
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e7 e3       	ldi	r30, 0x37	; 55
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	88 60       	ori	r24, 0x08	; 8
    1630:	8c 93       	st	X, r24
	 	 * 1. Fast PWM mode FOC0=0
	 	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 	 */
	 	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00) | (1<<CS02) ;
    1632:	e3 e5       	ldi	r30, 0x53	; 83
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8d e6       	ldi	r24, 0x6D	; 109
    1638:	80 83       	st	Z, r24
 }
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void ADC_init(const ADMUX_ConfigType * Config_Ptr1 ,const ADCSRA_ConfigType * Config_Ptr2 , const SFIOR_ConfigType * Config_Ptr3)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <ADC_init+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <ADC_init+0x8>
    164a:	00 d0       	rcall	.+0      	; 0x164c <ADC_init+0xa>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	7c 83       	std	Y+4, r23	; 0x04
    1656:	6b 83       	std	Y+3, r22	; 0x03
    1658:	5e 83       	std	Y+6, r21	; 0x06
    165a:	4d 83       	std	Y+5, r20	; 0x05
	/* ADMUX Register Bits Description:
	 * REFS1:0 : To choose Voltage Reference
	 * ADLAR   : To Adjust Result Presentation 
	 * MUX4:0  : To choose channel X as initialization
	 */
	ADMUX = (ADMUX & 0XDF) | (Config_Ptr1 -> Result);
    165c:	a7 e2       	ldi	r26, 0x27	; 39
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e7 e2       	ldi	r30, 0x27	; 39
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	98 2f       	mov	r25, r24
    1668:	9f 7d       	andi	r25, 0xDF	; 223
    166a:	e9 81       	ldd	r30, Y+1	; 0x01
    166c:	fa 81       	ldd	r31, Y+2	; 0x02
    166e:	80 81       	ld	r24, Z
    1670:	89 2b       	or	r24, r25
    1672:	8c 93       	st	X, r24
	ADMUX = (ADMUX & 0x3F) | (Config_Ptr1->Reference << 6);
    1674:	a7 e2       	ldi	r26, 0x27	; 39
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e2       	ldi	r30, 0x27	; 39
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	28 2f       	mov	r18, r24
    1680:	2f 73       	andi	r18, 0x3F	; 63
    1682:	e9 81       	ldd	r30, Y+1	; 0x01
    1684:	fa 81       	ldd	r31, Y+2	; 0x02
    1686:	81 81       	ldd	r24, Z+1	; 0x01
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	00 24       	eor	r0, r0
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	07 94       	ror	r0
    1694:	96 95       	lsr	r25
    1696:	87 95       	ror	r24
    1698:	07 94       	ror	r0
    169a:	98 2f       	mov	r25, r24
    169c:	80 2d       	mov	r24, r0
    169e:	82 2b       	or	r24, r18
    16a0:	8c 93       	st	X, r24
	 * ADEN 0 or 1 : Disable or Enable (ADC Enable)
	 * ADIE 0 or 1 : Disable or Enable (ADC Enable Interrupt)
	 * ADATE 0 or 1 : Disable or Enable  (Auto Trigger)
	 * ADPS2:0 : To choose ADC_Clock
	 */
	ADCSRA = (ADCSRA & 0XF8) | (Config_Ptr2 -> Prescaler);
    16a2:	a6 e2       	ldi	r26, 0x26	; 38
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e6 e2       	ldi	r30, 0x26	; 38
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	98 2f       	mov	r25, r24
    16ae:	98 7f       	andi	r25, 0xF8	; 248
    16b0:	eb 81       	ldd	r30, Y+3	; 0x03
    16b2:	fc 81       	ldd	r31, Y+4	; 0x04
    16b4:	80 81       	ld	r24, Z
    16b6:	89 2b       	or	r24, r25
    16b8:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0XF7) | (Config_Ptr2 -> Interrupt);
    16ba:	a6 e2       	ldi	r26, 0x26	; 38
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e6 e2       	ldi	r30, 0x26	; 38
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	98 2f       	mov	r25, r24
    16c6:	97 7f       	andi	r25, 0xF7	; 247
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	89 2b       	or	r24, r25
    16d0:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0XDF) | (Config_Ptr2 -> AutoTrigger);
    16d2:	a6 e2       	ldi	r26, 0x26	; 38
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e6 e2       	ldi	r30, 0x26	; 38
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	98 2f       	mov	r25, r24
    16de:	9f 7d       	andi	r25, 0xDF	; 223
    16e0:	eb 81       	ldd	r30, Y+3	; 0x03
    16e2:	fc 81       	ldd	r31, Y+4	; 0x04
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	89 2b       	or	r24, r25
    16e8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN) ;
    16ea:	a6 e2       	ldi	r26, 0x26	; 38
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e6 e2       	ldi	r30, 0x26	; 38
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 68       	ori	r24, 0x80	; 128
    16f6:	8c 93       	st	X, r24

	/* SFIOR Register Bits Description:
	 * ADTS2:0 : Select which source will trigger
	 */
	SFIOR = (SFIOR & 0X1F) | (Config_Ptr3 -> AutoTrigger);
    16f8:	a0 e5       	ldi	r26, 0x50	; 80
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e0 e5       	ldi	r30, 0x50	; 80
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	98 2f       	mov	r25, r24
    1704:	9f 71       	andi	r25, 0x1F	; 31
    1706:	ed 81       	ldd	r30, Y+5	; 0x05
    1708:	fe 81       	ldd	r31, Y+6	; 0x06
    170a:	80 81       	ld	r24, Z
    170c:	89 2b       	or	r24, r25
    170e:	8c 93       	st	X, r24
}
    1710:	26 96       	adiw	r28, 0x06	; 6
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <ADC_readChannel>:

#ifdef POLLING

uint16 ADC_readChannel(uint8 channel_num)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	0f 92       	push	r0
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	87 70       	andi	r24, 0x07	; 7
    1732:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1734:	a7 e2       	ldi	r26, 0x27	; 39
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e2       	ldi	r30, 0x27	; 39
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 7e       	andi	r24, 0xE0	; 224
    1740:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1742:	a7 e2       	ldi	r26, 0x27	; 39
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 e2       	ldi	r30, 0x27	; 39
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	90 81       	ld	r25, Z
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	89 2b       	or	r24, r25
    1750:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1752:	a6 e2       	ldi	r26, 0x26	; 38
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e6 e2       	ldi	r30, 0x26	; 38
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 64       	ori	r24, 0x40	; 64
    175e:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    1760:	e6 e2       	ldi	r30, 0x26	; 38
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	80 71       	andi	r24, 0x10	; 16
    176c:	90 70       	andi	r25, 0x00	; 0
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	b9 f3       	breq	.-18     	; 0x1760 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    1772:	a6 e2       	ldi	r26, 0x26	; 38
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e6 e2       	ldi	r30, 0x26	; 38
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 61       	ori	r24, 0x10	; 16
    177e:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    1780:	e4 e2       	ldi	r30, 0x24	; 36
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
}
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_setupPinDirection+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <GPIO_setupPinDirection+0x8>
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	6a 83       	std	Y+2, r22	; 0x02
    17a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <GPIO_setupPinDirection+0x1c>
    17aa:	d5 c0       	rjmp	.+426    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <GPIO_setupPinDirection+0x24>
    17b2:	d1 c0       	rjmp	.+418    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	3d 83       	std	Y+5, r19	; 0x05
    17bc:	2c 83       	std	Y+4, r18	; 0x04
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <GPIO_setupPinDirection+0x3a>
    17c8:	43 c0       	rjmp	.+134    	; 0x1850 <GPIO_setupPinDirection+0xc0>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <GPIO_setupPinDirection+0x4e>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	71 f0       	breq	.+28     	; 0x17f8 <GPIO_setupPinDirection+0x68>
    17dc:	bc c0       	rjmp	.+376    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
    17de:	2c 81       	ldd	r18, Y+4	; 0x04
    17e0:	3d 81       	ldd	r19, Y+5	; 0x05
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <GPIO_setupPinDirection+0x5a>
    17e8:	5f c0       	rjmp	.+190    	; 0x18a8 <GPIO_setupPinDirection+0x118>
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <GPIO_setupPinDirection+0x66>
    17f4:	85 c0       	rjmp	.+266    	; 0x1900 <GPIO_setupPinDirection+0x170>
    17f6:	af c0       	rjmp	.+350    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17fe:	aa e3       	ldi	r26, 0x3A	; 58
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ea e3       	ldi	r30, 0x3A	; 58
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_setupPinDirection+0x8c>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_setupPinDirection+0x88>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	98 c0       	rjmp	.+304    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1826:	aa e3       	ldi	r26, 0x3A	; 58
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	ea e3       	ldi	r30, 0x3A	; 58
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_setupPinDirection+0xb4>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_setupPinDirection+0xb0>
    1848:	80 95       	com	r24
    184a:	84 23       	and	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	83 c0       	rjmp	.+262    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	a1 f4       	brne	.+40     	; 0x187e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1856:	a7 e3       	ldi	r26, 0x37	; 55
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_setupPinDirection+0xe4>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_setupPinDirection+0xe0>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	6c c0       	rjmp	.+216    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    187e:	a7 e3       	ldi	r26, 0x37	; 55
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e7 e3       	ldi	r30, 0x37	; 55
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_setupPinDirection+0x10c>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_setupPinDirection+0x108>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	57 c0       	rjmp	.+174    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	a1 f4       	brne	.+40     	; 0x18d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18ae:	a4 e3       	ldi	r26, 0x34	; 52
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e4 e3       	ldi	r30, 0x34	; 52
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <GPIO_setupPinDirection+0x13c>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <GPIO_setupPinDirection+0x138>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	40 c0       	rjmp	.+128    	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18d6:	a4 e3       	ldi	r26, 0x34	; 52
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e4 e3       	ldi	r30, 0x34	; 52
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_setupPinDirection+0x164>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_setupPinDirection+0x160>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	2b c0       	rjmp	.+86     	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	a1 f4       	brne	.+40     	; 0x192e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1906:	a1 e3       	ldi	r26, 0x31	; 49
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e1 e3       	ldi	r30, 0x31	; 49
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_setupPinDirection+0x194>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_setupPinDirection+0x190>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    192e:	a1 e3       	ldi	r26, 0x31	; 49
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e1 e3       	ldi	r30, 0x31	; 49
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_setupPinDirection+0x1bc>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_setupPinDirection+0x1b8>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <GPIO_writePin+0x6>
    196c:	00 d0       	rcall	.+0      	; 0x196e <GPIO_writePin+0x8>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	6a 83       	std	Y+2, r22	; 0x02
    1978:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 30       	cpi	r24, 0x08	; 8
    197e:	08 f0       	brcs	.+2      	; 0x1982 <GPIO_writePin+0x1c>
    1980:	d5 c0       	rjmp	.+426    	; 0x1b2c <GPIO_writePin+0x1c6>
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	08 f0       	brcs	.+2      	; 0x198a <GPIO_writePin+0x24>
    1988:	d1 c0       	rjmp	.+418    	; 0x1b2c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3d 83       	std	Y+5, r19	; 0x05
    1992:	2c 83       	std	Y+4, r18	; 0x04
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <GPIO_writePin+0x3a>
    199e:	43 c0       	rjmp	.+134    	; 0x1a26 <GPIO_writePin+0xc0>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <GPIO_writePin+0x4e>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	71 f0       	breq	.+28     	; 0x19ce <GPIO_writePin+0x68>
    19b2:	bc c0       	rjmp	.+376    	; 0x1b2c <GPIO_writePin+0x1c6>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <GPIO_writePin+0x5a>
    19be:	5f c0       	rjmp	.+190    	; 0x1a7e <GPIO_writePin+0x118>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <GPIO_writePin+0x66>
    19ca:	85 c0       	rjmp	.+266    	; 0x1ad6 <GPIO_writePin+0x170>
    19cc:	af c0       	rjmp	.+350    	; 0x1b2c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	a1 f4       	brne	.+40     	; 0x19fc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_writePin+0x8c>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_writePin+0x88>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	98 c0       	rjmp	.+304    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19fc:	ab e3       	ldi	r26, 0x3B	; 59
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	eb e3       	ldi	r30, 0x3B	; 59
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_writePin+0xb4>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_writePin+0xb0>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	83 c0       	rjmp	.+262    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	a1 f4       	brne	.+40     	; 0x1a54 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a2c:	a8 e3       	ldi	r26, 0x38	; 56
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e8 e3       	ldi	r30, 0x38	; 56
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_writePin+0xe4>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_writePin+0xe0>
    1a4e:	84 2b       	or	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	6c c0       	rjmp	.+216    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a54:	a8 e3       	ldi	r26, 0x38	; 56
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e8 e3       	ldi	r30, 0x38	; 56
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_writePin+0x10c>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_writePin+0x108>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	57 c0       	rjmp	.+174    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	a1 f4       	brne	.+40     	; 0x1aac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a84:	a5 e3       	ldi	r26, 0x35	; 53
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e5 e3       	ldi	r30, 0x35	; 53
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <GPIO_writePin+0x13c>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <GPIO_writePin+0x138>
    1aa6:	84 2b       	or	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	40 c0       	rjmp	.+128    	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1aac:	a5 e3       	ldi	r26, 0x35	; 53
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e3       	ldi	r30, 0x35	; 53
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_writePin+0x164>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_writePin+0x160>
    1ace:	80 95       	com	r24
    1ad0:	84 23       	and	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	2b c0       	rjmp	.+86     	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	a1 f4       	brne	.+40     	; 0x1b04 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1adc:	a2 e3       	ldi	r26, 0x32	; 50
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e2 e3       	ldi	r30, 0x32	; 50
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_writePin+0x194>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_writePin+0x190>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b04:	a2 e3       	ldi	r26, 0x32	; 50
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_writePin+0x1bc>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_writePin+0x1b8>
    1b26:	80 95       	com	r24
    1b28:	84 23       	and	r24, r20
    1b2a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <GPIO_readPin+0x6>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <GPIO_readPin+0x8>
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
    1b4c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b4e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <GPIO_readPin+0x1c>
    1b56:	84 c0       	rjmp	.+264    	; 0x1c60 <GPIO_readPin+0x124>
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <GPIO_readPin+0x24>
    1b5e:	80 c0       	rjmp	.+256    	; 0x1c60 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3d 83       	std	Y+5, r19	; 0x05
    1b68:	2c 83       	std	Y+4, r18	; 0x04
    1b6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b6e:	41 30       	cpi	r20, 0x01	; 1
    1b70:	51 05       	cpc	r21, r1
    1b72:	79 f1       	breq	.+94     	; 0x1bd2 <GPIO_readPin+0x96>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	34 f4       	brge	.+12     	; 0x1b8a <GPIO_readPin+0x4e>
    1b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b80:	3d 81       	ldd	r19, Y+5	; 0x05
    1b82:	21 15       	cp	r18, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	69 f0       	breq	.+26     	; 0x1ba2 <GPIO_readPin+0x66>
    1b88:	6b c0       	rjmp	.+214    	; 0x1c60 <GPIO_readPin+0x124>
    1b8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8e:	42 30       	cpi	r20, 0x02	; 2
    1b90:	51 05       	cpc	r21, r1
    1b92:	b9 f1       	breq	.+110    	; 0x1c02 <GPIO_readPin+0xc6>
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <GPIO_readPin+0x64>
    1b9e:	49 c0       	rjmp	.+146    	; 0x1c32 <GPIO_readPin+0xf6>
    1ba0:	5f c0       	rjmp	.+190    	; 0x1c60 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ba2:	e9 e3       	ldi	r30, 0x39	; 57
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a9 01       	movw	r20, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <GPIO_readPin+0x7e>
    1bb6:	55 95       	asr	r21
    1bb8:	47 95       	ror	r20
    1bba:	8a 95       	dec	r24
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <GPIO_readPin+0x7a>
    1bbe:	ca 01       	movw	r24, r20
    1bc0:	81 70       	andi	r24, 0x01	; 1
    1bc2:	90 70       	andi	r25, 0x00	; 0
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f0       	breq	.+6      	; 0x1bce <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	49 c0       	rjmp	.+146    	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bce:	19 82       	std	Y+1, r1	; 0x01
    1bd0:	47 c0       	rjmp	.+142    	; 0x1c60 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a9 01       	movw	r20, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_readPin+0xae>
    1be6:	55 95       	asr	r21
    1be8:	47 95       	ror	r20
    1bea:	8a 95       	dec	r24
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_readPin+0xaa>
    1bee:	ca 01       	movw	r24, r20
    1bf0:	81 70       	andi	r24, 0x01	; 1
    1bf2:	90 70       	andi	r25, 0x00	; 0
    1bf4:	88 23       	and	r24, r24
    1bf6:	19 f0       	breq	.+6      	; 0x1bfe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	31 c0       	rjmp	.+98     	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bfe:	19 82       	std	Y+1, r1	; 0x01
    1c00:	2f c0       	rjmp	.+94     	; 0x1c60 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c02:	e3 e3       	ldi	r30, 0x33	; 51
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a9 01       	movw	r20, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_readPin+0xde>
    1c16:	55 95       	asr	r21
    1c18:	47 95       	ror	r20
    1c1a:	8a 95       	dec	r24
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_readPin+0xda>
    1c1e:	ca 01       	movw	r24, r20
    1c20:	81 70       	andi	r24, 0x01	; 1
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	88 23       	and	r24, r24
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	19 c0       	rjmp	.+50     	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
    1c30:	17 c0       	rjmp	.+46     	; 0x1c60 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c32:	e0 e3       	ldi	r30, 0x30	; 48
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <GPIO_readPin+0x10e>
    1c46:	55 95       	asr	r21
    1c48:	47 95       	ror	r20
    1c4a:	8a 95       	dec	r24
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <GPIO_readPin+0x10a>
    1c4e:	ca 01       	movw	r24, r20
    1c50:	81 70       	andi	r24, 0x01	; 1
    1c52:	90 70       	andi	r25, 0x00	; 0
    1c54:	88 23       	and	r24, r24
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_setupPortDirection+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <GPIO_setupPortDirection+0x8>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	90 f5       	brcc	.+100    	; 0x1cec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3c 83       	std	Y+4, r19	; 0x04
    1c90:	2b 83       	std	Y+3, r18	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	d1 f0       	breq	.+52     	; 0x1cd0 <GPIO_setupPortDirection+0x5e>
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <GPIO_setupPortDirection+0x3e>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <GPIO_setupPortDirection+0x54>
    1cae:	1e c0       	rjmp	.+60     	; 0x1cec <GPIO_setupPortDirection+0x7a>
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	81 f0       	breq	.+32     	; 0x1cda <GPIO_setupPortDirection+0x68>
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <GPIO_setupPortDirection+0x72>
    1cc4:	13 c0       	rjmp	.+38     	; 0x1cec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cc6:	ea e3       	ldi	r30, 0x3A	; 58
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	80 83       	st	Z, r24
    1cce:	0e c0       	rjmp	.+28     	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cd0:	e7 e3       	ldi	r30, 0x37	; 55
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	80 83       	st	Z, r24
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cda:	e4 e3       	ldi	r30, 0x34	; 52
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	80 83       	st	Z, r24
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ce4:	e1 e3       	ldi	r30, 0x31	; 49
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <GPIO_writePort+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <GPIO_writePort+0x8>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	90 f5       	brcc	.+100    	; 0x1d74 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3c 83       	std	Y+4, r19	; 0x04
    1d18:	2b 83       	std	Y+3, r18	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	d1 f0       	breq	.+52     	; 0x1d58 <GPIO_writePort+0x5e>
    1d24:	2b 81       	ldd	r18, Y+3	; 0x03
    1d26:	3c 81       	ldd	r19, Y+4	; 0x04
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <GPIO_writePort+0x3e>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <GPIO_writePort+0x54>
    1d36:	1e c0       	rjmp	.+60     	; 0x1d74 <GPIO_writePort+0x7a>
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	81 f0       	breq	.+32     	; 0x1d62 <GPIO_writePort+0x68>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	81 f0       	breq	.+32     	; 0x1d6c <GPIO_writePort+0x72>
    1d4c:	13 c0       	rjmp	.+38     	; 0x1d74 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	80 83       	st	Z, r24
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	80 83       	st	Z, r24
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d62:	e5 e3       	ldi	r30, 0x35	; 53
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 83       	st	Z, r24
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d6c:	e2 e3       	ldi	r30, 0x32	; 50
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_readPort+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <GPIO_readPort+0x8>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d90:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	90 f5       	brcc	.+100    	; 0x1dfc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3c 83       	std	Y+4, r19	; 0x04
    1da0:	2b 83       	std	Y+3, r18	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	d1 f0       	breq	.+52     	; 0x1de0 <GPIO_readPort+0x5e>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <GPIO_readPort+0x3e>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <GPIO_readPort+0x54>
    1dbe:	1e c0       	rjmp	.+60     	; 0x1dfc <GPIO_readPort+0x7a>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	81 f0       	breq	.+32     	; 0x1dea <GPIO_readPort+0x68>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	81 f0       	breq	.+32     	; 0x1df4 <GPIO_readPort+0x72>
    1dd4:	13 c0       	rjmp	.+38     	; 0x1dfc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dd6:	e9 e3       	ldi	r30, 0x39	; 57
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	0e c0       	rjmp	.+28     	; 0x1dfc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1de0:	e6 e3       	ldi	r30, 0x36	; 54
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dea:	e3 e3       	ldi	r30, 0x33	; 51
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1df4:	e0 e3       	ldi	r30, 0x30	; 48
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	2e 97       	sbiw	r28, 0x0e	; 14
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_setupPinDirection>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 ea       	ldi	r26, 0xA0	; 160
    1e3a:	b1 e4       	ldi	r27, 0x41	; 65
    1e3c:	8b 87       	std	Y+11, r24	; 0x0b
    1e3e:	9c 87       	std	Y+12, r25	; 0x0c
    1e40:	ad 87       	std	Y+13, r26	; 0x0d
    1e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a e7       	ldi	r20, 0x7A	; 122
    1e52:	55 e4       	ldi	r21, 0x45	; 69
    1e54:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	8f 83       	std	Y+7, r24	; 0x07
    1e5e:	98 87       	std	Y+8, r25	; 0x08
    1e60:	a9 87       	std	Y+9, r26	; 0x09
    1e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_init+0x7a>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	78 85       	ldd	r23, Y+8	; 0x08
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <LCD_init+0xda>
    1ec8:	80 e9       	ldi	r24, 0x90	; 144
    1eca:	91 e0       	ldi	r25, 0x01	; 1
    1ecc:	9c 83       	std	Y+4, r25	; 0x04
    1ece:	8b 83       	std	Y+3, r24	; 0x03
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_init+0xc8>
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <LCD_init+0xbc>
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_init+0x104>
    1f14:	9a 83       	std	Y+2, r25	; 0x02
    1f16:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	6f ef       	ldi	r22, 0xFF	; 255
    1f1c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f20:	88 e3       	ldi	r24, 0x38	; 56
    1f22:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f26:	8c e0       	ldi	r24, 0x0C	; 12
    1f28:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
}
    1f32:	2e 96       	adiw	r28, 0x0e	; 14
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	e9 97       	sbiw	r28, 0x39	; 57
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e8       	ldi	r26, 0x80	; 128
    1f6a:	bf e3       	ldi	r27, 0x3F	; 63
    1f6c:	8d ab       	std	Y+53, r24	; 0x35
    1f6e:	9e ab       	std	Y+54, r25	; 0x36
    1f70:	af ab       	std	Y+55, r26	; 0x37
    1f72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	6d a9       	ldd	r22, Y+53	; 0x35
    1f76:	7e a9       	ldd	r23, Y+54	; 0x36
    1f78:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a e7       	ldi	r20, 0x7A	; 122
    1f82:	55 e4       	ldi	r21, 0x45	; 69
    1f84:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	89 ab       	std	Y+49, r24	; 0x31
    1f8e:	9a ab       	std	Y+50, r25	; 0x32
    1f90:	ab ab       	std	Y+51, r26	; 0x33
    1f92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f94:	69 a9       	ldd	r22, Y+49	; 0x31
    1f96:	7a a9       	ldd	r23, Y+50	; 0x32
    1f98:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_sendCommand+0x72>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	98 ab       	std	Y+48, r25	; 0x30
    1fb2:	8f a7       	std	Y+47, r24	; 0x2f
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1fb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fba:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	98 ab       	std	Y+48, r25	; 0x30
    1ff4:	8f a7       	std	Y+47, r24	; 0x2f
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_sendCommand+0xd2>
    1ff8:	80 e9       	ldi	r24, 0x90	; 144
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	9e a7       	std	Y+46, r25	; 0x2e
    1ffe:	8d a7       	std	Y+45, r24	; 0x2d
    2000:	8d a5       	ldd	r24, Y+45	; 0x2d
    2002:	9e a5       	ldd	r25, Y+46	; 0x2e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_sendCommand+0xc0>
    2008:	9e a7       	std	Y+46, r25	; 0x2e
    200a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8f a5       	ldd	r24, Y+47	; 0x2f
    200e:	98 a9       	ldd	r25, Y+48	; 0x30
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	98 ab       	std	Y+48, r25	; 0x30
    2014:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8f a5       	ldd	r24, Y+47	; 0x2f
    2018:	98 a9       	ldd	r25, Y+48	; 0x30
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_sendCommand+0xb4>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	69 a9       	ldd	r22, Y+49	; 0x31
    2022:	7a a9       	ldd	r23, Y+50	; 0x32
    2024:	8b a9       	ldd	r24, Y+51	; 0x33
    2026:	9c a9       	ldd	r25, Y+52	; 0x34
    2028:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	98 ab       	std	Y+48, r25	; 0x30
    2032:	8f a7       	std	Y+47, r24	; 0x2f
    2034:	8f a5       	ldd	r24, Y+47	; 0x2f
    2036:	98 a9       	ldd	r25, Y+48	; 0x30
    2038:	9c a7       	std	Y+44, r25	; 0x2c
    203a:	8b a7       	std	Y+43, r24	; 0x2b
    203c:	8b a5       	ldd	r24, Y+43	; 0x2b
    203e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_sendCommand+0xfc>
    2044:	9c a7       	std	Y+44, r25	; 0x2c
    2046:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	8f a3       	std	Y+39, r24	; 0x27
    205c:	98 a7       	std	Y+40, r25	; 0x28
    205e:	a9 a7       	std	Y+41, r26	; 0x29
    2060:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6f a1       	ldd	r22, Y+39	; 0x27
    2064:	78 a5       	ldd	r23, Y+40	; 0x28
    2066:	89 a5       	ldd	r24, Y+41	; 0x29
    2068:	9a a5       	ldd	r25, Y+42	; 0x2a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a e7       	ldi	r20, 0x7A	; 122
    2070:	55 e4       	ldi	r21, 0x45	; 69
    2072:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8b a3       	std	Y+35, r24	; 0x23
    207c:	9c a3       	std	Y+36, r25	; 0x24
    207e:	ad a3       	std	Y+37, r26	; 0x25
    2080:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2082:	6b a1       	ldd	r22, Y+35	; 0x23
    2084:	7c a1       	ldd	r23, Y+36	; 0x24
    2086:	8d a1       	ldd	r24, Y+37	; 0x25
    2088:	9e a1       	ldd	r25, Y+38	; 0x26
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_sendCommand+0x160>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6f a1       	ldd	r22, Y+39	; 0x27
    20be:	78 a5       	ldd	r23, Y+40	; 0x28
    20c0:	89 a5       	ldd	r24, Y+41	; 0x29
    20c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9a a3       	std	Y+34, r25	; 0x22
    20e2:	89 a3       	std	Y+33, r24	; 0x21
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_sendCommand+0x1c0>
    20e6:	80 e9       	ldi	r24, 0x90	; 144
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	98 a3       	std	Y+32, r25	; 0x20
    20ec:	8f 8f       	std	Y+31, r24	; 0x1f
    20ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f0:	98 a1       	ldd	r25, Y+32	; 0x20
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_sendCommand+0x1ae>
    20f6:	98 a3       	std	Y+32, r25	; 0x20
    20f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	89 a1       	ldd	r24, Y+33	; 0x21
    20fc:	9a a1       	ldd	r25, Y+34	; 0x22
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9a a3       	std	Y+34, r25	; 0x22
    2102:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	89 a1       	ldd	r24, Y+33	; 0x21
    2106:	9a a1       	ldd	r25, Y+34	; 0x22
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_sendCommand+0x1a2>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6b a1       	ldd	r22, Y+35	; 0x23
    2110:	7c a1       	ldd	r23, Y+36	; 0x24
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	9e a1       	ldd	r25, Y+38	; 0x26
    2116:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9a a3       	std	Y+34, r25	; 0x22
    2120:	89 a3       	std	Y+33, r24	; 0x21
    2122:	89 a1       	ldd	r24, Y+33	; 0x21
    2124:	9a a1       	ldd	r25, Y+34	; 0x22
    2126:	9e 8f       	std	Y+30, r25	; 0x1e
    2128:	8d 8f       	std	Y+29, r24	; 0x1d
    212a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_sendCommand+0x1ea>
    2132:	9e 8f       	std	Y+30, r25	; 0x1e
    2134:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	69 ad       	ldd	r22, Y+57	; 0x39
    213a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 e8       	ldi	r26, 0x80	; 128
    2144:	bf e3       	ldi	r27, 0x3F	; 63
    2146:	89 8f       	std	Y+25, r24	; 0x19
    2148:	9a 8f       	std	Y+26, r25	; 0x1a
    214a:	ab 8f       	std	Y+27, r26	; 0x1b
    214c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	69 8d       	ldd	r22, Y+25	; 0x19
    2150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a e7       	ldi	r20, 0x7A	; 122
    215c:	55 e4       	ldi	r21, 0x45	; 69
    215e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8d 8b       	std	Y+21, r24	; 0x15
    2168:	9e 8b       	std	Y+22, r25	; 0x16
    216a:	af 8b       	std	Y+23, r26	; 0x17
    216c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    216e:	6d 89       	ldd	r22, Y+21	; 0x15
    2170:	7e 89       	ldd	r23, Y+22	; 0x16
    2172:	8f 89       	ldd	r24, Y+23	; 0x17
    2174:	98 8d       	ldd	r25, Y+24	; 0x18
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	2c f4       	brge	.+10     	; 0x2190 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	3f c0       	rjmp	.+126    	; 0x220e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2190:	6d 89       	ldd	r22, Y+21	; 0x15
    2192:	7e 89       	ldd	r23, Y+22	; 0x16
    2194:	8f 89       	ldd	r24, Y+23	; 0x17
    2196:	98 8d       	ldd	r25, Y+24	; 0x18
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	3f ef       	ldi	r19, 0xFF	; 255
    219c:	4f e7       	ldi	r20, 0x7F	; 127
    219e:	57 e4       	ldi	r21, 0x47	; 71
    21a0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	4c f5       	brge	.+82     	; 0x21fa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	69 8d       	ldd	r22, Y+25	; 0x19
    21aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9c 8b       	std	Y+20, r25	; 0x14
    21ce:	8b 8b       	std	Y+19, r24	; 0x13
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <LCD_sendCommand+0x2ac>
    21d2:	80 e9       	ldi	r24, 0x90	; 144
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	9a 8b       	std	Y+18, r25	; 0x12
    21d8:	89 8b       	std	Y+17, r24	; 0x11
    21da:	89 89       	ldd	r24, Y+17	; 0x11
    21dc:	9a 89       	ldd	r25, Y+18	; 0x12
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_sendCommand+0x29a>
    21e2:	9a 8b       	std	Y+18, r25	; 0x12
    21e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9c 8b       	std	Y+20, r25	; 0x14
    21ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <LCD_sendCommand+0x28e>
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6d 89       	ldd	r22, Y+21	; 0x15
    21fc:	7e 89       	ldd	r23, Y+22	; 0x16
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	98 8b       	std	Y+16, r25	; 0x10
    2214:	8f 87       	std	Y+15, r24	; 0x0f
    2216:	8f 85       	ldd	r24, Y+15	; 0x0f
    2218:	98 89       	ldd	r25, Y+16	; 0x10
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x2d6>
    221e:	98 8b       	std	Y+16, r25	; 0x10
    2220:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	8b 87       	std	Y+11, r24	; 0x0b
    2236:	9c 87       	std	Y+12, r25	; 0x0c
    2238:	ad 87       	std	Y+13, r26	; 0x0d
    223a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	6b 85       	ldd	r22, Y+11	; 0x0b
    223e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	9e 85       	ldd	r25, Y+14	; 0x0e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a e7       	ldi	r20, 0x7A	; 122
    224a:	55 e4       	ldi	r21, 0x45	; 69
    224c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	98 87       	std	Y+8, r25	; 0x08
    2258:	a9 87       	std	Y+9, r26	; 0x09
    225a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_sendCommand+0x39a>
    22c0:	80 e9       	ldi	r24, 0x90	; 144
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_sendCommand+0x388>
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <LCD_sendCommand+0x37c>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_sendCommand+0x3c4>
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2310:	e9 96       	adiw	r28, 0x39	; 57
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	e9 97       	sbiw	r28, 0x39	; 57
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2338:	83 e0       	ldi	r24, 0x03	; 3
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	8d ab       	std	Y+53, r24	; 0x35
    234c:	9e ab       	std	Y+54, r25	; 0x36
    234e:	af ab       	std	Y+55, r26	; 0x37
    2350:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	6d a9       	ldd	r22, Y+53	; 0x35
    2354:	7e a9       	ldd	r23, Y+54	; 0x36
    2356:	8f a9       	ldd	r24, Y+55	; 0x37
    2358:	98 ad       	ldd	r25, Y+56	; 0x38
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a e7       	ldi	r20, 0x7A	; 122
    2360:	55 e4       	ldi	r21, 0x45	; 69
    2362:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	89 ab       	std	Y+49, r24	; 0x31
    236c:	9a ab       	std	Y+50, r25	; 0x32
    236e:	ab ab       	std	Y+51, r26	; 0x33
    2370:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2372:	69 a9       	ldd	r22, Y+49	; 0x31
    2374:	7a a9       	ldd	r23, Y+50	; 0x32
    2376:	8b a9       	ldd	r24, Y+51	; 0x33
    2378:	9c a9       	ldd	r25, Y+52	; 0x34
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <LCD_displayCharacter+0x72>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	98 ab       	std	Y+48, r25	; 0x30
    2390:	8f a7       	std	Y+47, r24	; 0x2f
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2394:	69 a9       	ldd	r22, Y+49	; 0x31
    2396:	7a a9       	ldd	r23, Y+50	; 0x32
    2398:	8b a9       	ldd	r24, Y+51	; 0x33
    239a:	9c a9       	ldd	r25, Y+52	; 0x34
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	6d a9       	ldd	r22, Y+53	; 0x35
    23ae:	7e a9       	ldd	r23, Y+54	; 0x36
    23b0:	8f a9       	ldd	r24, Y+55	; 0x37
    23b2:	98 ad       	ldd	r25, Y+56	; 0x38
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	98 ab       	std	Y+48, r25	; 0x30
    23d2:	8f a7       	std	Y+47, r24	; 0x2f
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_displayCharacter+0xd2>
    23d6:	80 e9       	ldi	r24, 0x90	; 144
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	9e a7       	std	Y+46, r25	; 0x2e
    23dc:	8d a7       	std	Y+45, r24	; 0x2d
    23de:	8d a5       	ldd	r24, Y+45	; 0x2d
    23e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_displayCharacter+0xc0>
    23e6:	9e a7       	std	Y+46, r25	; 0x2e
    23e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ec:	98 a9       	ldd	r25, Y+48	; 0x30
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	98 ab       	std	Y+48, r25	; 0x30
    23f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f6:	98 a9       	ldd	r25, Y+48	; 0x30
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <LCD_displayCharacter+0xb4>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2400:	7a a9       	ldd	r23, Y+50	; 0x32
    2402:	8b a9       	ldd	r24, Y+51	; 0x33
    2404:	9c a9       	ldd	r25, Y+52	; 0x34
    2406:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	98 ab       	std	Y+48, r25	; 0x30
    2410:	8f a7       	std	Y+47, r24	; 0x2f
    2412:	8f a5       	ldd	r24, Y+47	; 0x2f
    2414:	98 a9       	ldd	r25, Y+48	; 0x30
    2416:	9c a7       	std	Y+44, r25	; 0x2c
    2418:	8b a7       	std	Y+43, r24	; 0x2b
    241a:	8b a5       	ldd	r24, Y+43	; 0x2b
    241c:	9c a5       	ldd	r25, Y+44	; 0x2c
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0xfc>
    2422:	9c a7       	std	Y+44, r25	; 0x2c
    2424:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e8       	ldi	r26, 0x80	; 128
    2436:	bf e3       	ldi	r27, 0x3F	; 63
    2438:	8f a3       	std	Y+39, r24	; 0x27
    243a:	98 a7       	std	Y+40, r25	; 0x28
    243c:	a9 a7       	std	Y+41, r26	; 0x29
    243e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	6f a1       	ldd	r22, Y+39	; 0x27
    2442:	78 a5       	ldd	r23, Y+40	; 0x28
    2444:	89 a5       	ldd	r24, Y+41	; 0x29
    2446:	9a a5       	ldd	r25, Y+42	; 0x2a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	55 e4       	ldi	r21, 0x45	; 69
    2450:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8b a3       	std	Y+35, r24	; 0x23
    245a:	9c a3       	std	Y+36, r25	; 0x24
    245c:	ad a3       	std	Y+37, r26	; 0x25
    245e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2460:	6b a1       	ldd	r22, Y+35	; 0x23
    2462:	7c a1       	ldd	r23, Y+36	; 0x24
    2464:	8d a1       	ldd	r24, Y+37	; 0x25
    2466:	9e a1       	ldd	r25, Y+38	; 0x26
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9a a3       	std	Y+34, r25	; 0x22
    247e:	89 a3       	std	Y+33, r24	; 0x21
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2482:	6b a1       	ldd	r22, Y+35	; 0x23
    2484:	7c a1       	ldd	r23, Y+36	; 0x24
    2486:	8d a1       	ldd	r24, Y+37	; 0x25
    2488:	9e a1       	ldd	r25, Y+38	; 0x26
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	6f a1       	ldd	r22, Y+39	; 0x27
    249c:	78 a5       	ldd	r23, Y+40	; 0x28
    249e:	89 a5       	ldd	r24, Y+41	; 0x29
    24a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9a a3       	std	Y+34, r25	; 0x22
    24c0:	89 a3       	std	Y+33, r24	; 0x21
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_displayCharacter+0x1c0>
    24c4:	80 e9       	ldi	r24, 0x90	; 144
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	98 a3       	std	Y+32, r25	; 0x20
    24ca:	8f 8f       	std	Y+31, r24	; 0x1f
    24cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ce:	98 a1       	ldd	r25, Y+32	; 0x20
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_displayCharacter+0x1ae>
    24d4:	98 a3       	std	Y+32, r25	; 0x20
    24d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	89 a1       	ldd	r24, Y+33	; 0x21
    24da:	9a a1       	ldd	r25, Y+34	; 0x22
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9a a3       	std	Y+34, r25	; 0x22
    24e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	89 a1       	ldd	r24, Y+33	; 0x21
    24e4:	9a a1       	ldd	r25, Y+34	; 0x22
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_displayCharacter+0x1a2>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6b a1       	ldd	r22, Y+35	; 0x23
    24ee:	7c a1       	ldd	r23, Y+36	; 0x24
    24f0:	8d a1       	ldd	r24, Y+37	; 0x25
    24f2:	9e a1       	ldd	r25, Y+38	; 0x26
    24f4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9a a3       	std	Y+34, r25	; 0x22
    24fe:	89 a3       	std	Y+33, r24	; 0x21
    2500:	89 a1       	ldd	r24, Y+33	; 0x21
    2502:	9a a1       	ldd	r25, Y+34	; 0x22
    2504:	9e 8f       	std	Y+30, r25	; 0x1e
    2506:	8d 8f       	std	Y+29, r24	; 0x1d
    2508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    250a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_displayCharacter+0x1ea>
    2510:	9e 8f       	std	Y+30, r25	; 0x1e
    2512:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	69 ad       	ldd	r22, Y+57	; 0x39
    2518:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e8       	ldi	r26, 0x80	; 128
    2522:	bf e3       	ldi	r27, 0x3F	; 63
    2524:	89 8f       	std	Y+25, r24	; 0x19
    2526:	9a 8f       	std	Y+26, r25	; 0x1a
    2528:	ab 8f       	std	Y+27, r26	; 0x1b
    252a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	69 8d       	ldd	r22, Y+25	; 0x19
    252e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	55 e4       	ldi	r21, 0x45	; 69
    253c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8d 8b       	std	Y+21, r24	; 0x15
    2546:	9e 8b       	std	Y+22, r25	; 0x16
    2548:	af 8b       	std	Y+23, r26	; 0x17
    254a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    254c:	6d 89       	ldd	r22, Y+21	; 0x15
    254e:	7e 89       	ldd	r23, Y+22	; 0x16
    2550:	8f 89       	ldd	r24, Y+23	; 0x17
    2552:	98 8d       	ldd	r25, Y+24	; 0x18
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 8b       	std	Y+20, r25	; 0x14
    256a:	8b 8b       	std	Y+19, r24	; 0x13
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    256e:	6d 89       	ldd	r22, Y+21	; 0x15
    2570:	7e 89       	ldd	r23, Y+22	; 0x16
    2572:	8f 89       	ldd	r24, Y+23	; 0x17
    2574:	98 8d       	ldd	r25, Y+24	; 0x18
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	69 8d       	ldd	r22, Y+25	; 0x19
    2588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9c 8b       	std	Y+20, r25	; 0x14
    25ac:	8b 8b       	std	Y+19, r24	; 0x13
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <LCD_displayCharacter+0x2ac>
    25b0:	80 e9       	ldi	r24, 0x90	; 144
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	9a 8b       	std	Y+18, r25	; 0x12
    25b6:	89 8b       	std	Y+17, r24	; 0x11
    25b8:	89 89       	ldd	r24, Y+17	; 0x11
    25ba:	9a 89       	ldd	r25, Y+18	; 0x12
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_displayCharacter+0x29a>
    25c0:	9a 8b       	std	Y+18, r25	; 0x12
    25c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	8b 89       	ldd	r24, Y+19	; 0x13
    25c6:	9c 89       	ldd	r25, Y+20	; 0x14
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9c 8b       	std	Y+20, r25	; 0x14
    25cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	8b 89       	ldd	r24, Y+19	; 0x13
    25d0:	9c 89       	ldd	r25, Y+20	; 0x14
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <LCD_displayCharacter+0x28e>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6d 89       	ldd	r22, Y+21	; 0x15
    25da:	7e 89       	ldd	r23, Y+22	; 0x16
    25dc:	8f 89       	ldd	r24, Y+23	; 0x17
    25de:	98 8d       	ldd	r25, Y+24	; 0x18
    25e0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9c 8b       	std	Y+20, r25	; 0x14
    25ea:	8b 8b       	std	Y+19, r24	; 0x13
    25ec:	8b 89       	ldd	r24, Y+19	; 0x13
    25ee:	9c 89       	ldd	r25, Y+20	; 0x14
    25f0:	98 8b       	std	Y+16, r25	; 0x10
    25f2:	8f 87       	std	Y+15, r24	; 0x0f
    25f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f6:	98 89       	ldd	r25, Y+16	; 0x10
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_displayCharacter+0x2d6>
    25fc:	98 8b       	std	Y+16, r25	; 0x10
    25fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 b3 0c 	call	0x1966	; 0x1966 <GPIO_writePin>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e8       	ldi	r26, 0x80	; 128
    2610:	bf e3       	ldi	r27, 0x3F	; 63
    2612:	8b 87       	std	Y+11, r24	; 0x0b
    2614:	9c 87       	std	Y+12, r25	; 0x0c
    2616:	ad 87       	std	Y+13, r26	; 0x0d
    2618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a e7       	ldi	r20, 0x7A	; 122
    2628:	55 e4       	ldi	r21, 0x45	; 69
    262a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8f 83       	std	Y+7, r24	; 0x07
    2634:	98 87       	std	Y+8, r25	; 0x08
    2636:	a9 87       	std	Y+9, r26	; 0x09
    2638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	3f c0       	rjmp	.+126    	; 0x26da <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <LCD_displayCharacter+0x39a>
    269e:	80 e9       	ldi	r24, 0x90	; 144
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_displayCharacter+0x388>
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <LCD_displayCharacter+0x37c>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_displayCharacter+0x3c4>
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26ee:	e9 96       	adiw	r28, 0x39	; 57
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <LCD_displayString+0x6>
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	9b 83       	std	Y+3, r25	; 0x03
    270e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2710:	19 82       	std	Y+1, r1	; 0x01
    2712:	0e c0       	rjmp	.+28     	; 0x2730 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	80 81       	ld	r24, Z
    2726:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		i++;
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	fc 01       	movw	r30, r24
    273c:	e2 0f       	add	r30, r18
    273e:	f3 1f       	adc	r31, r19
    2740:	80 81       	ld	r24, Z
    2742:	88 23       	and	r24, r24
    2744:	39 f7       	brne	.-50     	; 0x2714 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	00 d0       	rcall	.+0      	; 0x2758 <LCD_moveCursor+0x6>
    2758:	00 d0       	rcall	.+0      	; 0x275a <LCD_moveCursor+0x8>
    275a:	0f 92       	push	r0
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	8a 83       	std	Y+2, r24	; 0x02
    2762:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	3d 83       	std	Y+5, r19	; 0x05
    276c:	2c 83       	std	Y+4, r18	; 0x04
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	9d 81       	ldd	r25, Y+5	; 0x05
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	91 05       	cpc	r25, r1
    2776:	c1 f0       	breq	.+48     	; 0x27a8 <LCD_moveCursor+0x56>
    2778:	2c 81       	ldd	r18, Y+4	; 0x04
    277a:	3d 81       	ldd	r19, Y+5	; 0x05
    277c:	22 30       	cpi	r18, 0x02	; 2
    277e:	31 05       	cpc	r19, r1
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_moveCursor+0x3a>
    2782:	8c 81       	ldd	r24, Y+4	; 0x04
    2784:	9d 81       	ldd	r25, Y+5	; 0x05
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	61 f0       	breq	.+24     	; 0x27a2 <LCD_moveCursor+0x50>
    278a:	19 c0       	rjmp	.+50     	; 0x27be <LCD_moveCursor+0x6c>
    278c:	2c 81       	ldd	r18, Y+4	; 0x04
    278e:	3d 81       	ldd	r19, Y+5	; 0x05
    2790:	22 30       	cpi	r18, 0x02	; 2
    2792:	31 05       	cpc	r19, r1
    2794:	69 f0       	breq	.+26     	; 0x27b0 <LCD_moveCursor+0x5e>
    2796:	8c 81       	ldd	r24, Y+4	; 0x04
    2798:	9d 81       	ldd	r25, Y+5	; 0x05
    279a:	83 30       	cpi	r24, 0x03	; 3
    279c:	91 05       	cpc	r25, r1
    279e:	61 f0       	breq	.+24     	; 0x27b8 <LCD_moveCursor+0x66>
    27a0:	0e c0       	rjmp	.+28     	; 0x27be <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	0b c0       	rjmp	.+22     	; 0x27be <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	80 5c       	subi	r24, 0xC0	; 192
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	07 c0       	rjmp	.+14     	; 0x27be <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	80 5f       	subi	r24, 0xF0	; 240
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	80 5b       	subi	r24, 0xB0	; 176
    27bc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	80 68       	ori	r24, 0x80	; 128
    27c2:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
}
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	00 d0       	rcall	.+0      	; 0x27dc <LCD_displayStringRowColumn+0x6>
    27dc:	00 d0       	rcall	.+0      	; 0x27de <LCD_displayStringRowColumn+0x8>
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	6a 83       	std	Y+2, r22	; 0x02
    27e6:	5c 83       	std	Y+4, r21	; 0x04
    27e8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	6a 81       	ldd	r22, Y+2	; 0x02
    27ee:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_displayString>
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	62 97       	sbiw	r28, 0x12	; 18
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	9a 8b       	std	Y+18, r25	; 0x12
    281e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2820:	89 89       	ldd	r24, Y+17	; 0x11
    2822:	9a 89       	ldd	r25, Y+18	; 0x12
    2824:	9e 01       	movw	r18, r28
    2826:	2f 5f       	subi	r18, 0xFF	; 255
    2828:	3f 4f       	sbci	r19, 0xFF	; 255
    282a:	b9 01       	movw	r22, r18
    282c:	4a e0       	ldi	r20, 0x0A	; 10
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <itoa>
   LCD_displayString(buff); /* Display the string */
    2834:	ce 01       	movw	r24, r28
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_displayString>
}
    283c:	62 96       	adiw	r28, 0x12	; 18
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float data)
{
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	68 97       	sbiw	r28, 0x18	; 24
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	6d 8b       	std	Y+21, r22	; 0x15
    2868:	7e 8b       	std	Y+22, r23	; 0x16
    286a:	8f 8b       	std	Y+23, r24	; 0x17
    286c:	98 8f       	std	Y+24, r25	; 0x18
    char buffer[20];  /* Create a buffer to hold the float as a string */
    dtostrf(data, 2,2, buffer);  /* Convert the float to string with 2 decimal places */
    286e:	8d 89       	ldd	r24, Y+21	; 0x15
    2870:	9e 89       	ldd	r25, Y+22	; 0x16
    2872:	af 89       	ldd	r26, Y+23	; 0x17
    2874:	b8 8d       	ldd	r27, Y+24	; 0x18
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	42 e0       	ldi	r20, 0x02	; 2
    287c:	50 e0       	ldi	r21, 0x00	; 0
    287e:	22 e0       	ldi	r18, 0x02	; 2
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	fe 01       	movw	r30, r28
    2884:	31 96       	adiw	r30, 0x01	; 1
    2886:	8f 01       	movw	r16, r30
    2888:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <dtostrf>
    LCD_displayString(buffer);  /* Display the string on the LCD */
    288c:	ce 01       	movw	r24, r28
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_displayString>
}
    2894:	68 96       	adiw	r28, 0x18	; 24
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	08 95       	ret

000028aa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <LM35_getTemperature+0x6>
    28c4:	0f 92       	push	r0
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    28ca:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    28cc:	1a 82       	std	Y+2, r1	; 0x02
    28ce:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	0e 94 91 0b 	call	0x1722	; 0x1722 <ADC_readChannel>
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	cc 01       	movw	r24, r24
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	26 e9       	ldi	r18, 0x96	; 150
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__mulsi3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	2a e0       	ldi	r18, 0x0A	; 10
    290a:	37 ed       	ldi	r19, 0xD7	; 215
    290c:	43 e2       	ldi	r20, 0x23	; 35
    290e:	50 e4       	ldi	r21, 0x40	; 64
    2910:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 ed       	ldi	r19, 0xD0	; 208
    2920:	4f eb       	ldi	r20, 0xBF	; 191
    2922:	54 e4       	ldi	r21, 0x44	; 68
    2924:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <__mulsi3>:
    2948:	62 9f       	mul	r22, r18
    294a:	d0 01       	movw	r26, r0
    294c:	73 9f       	mul	r23, r19
    294e:	f0 01       	movw	r30, r0
    2950:	82 9f       	mul	r24, r18
    2952:	e0 0d       	add	r30, r0
    2954:	f1 1d       	adc	r31, r1
    2956:	64 9f       	mul	r22, r20
    2958:	e0 0d       	add	r30, r0
    295a:	f1 1d       	adc	r31, r1
    295c:	92 9f       	mul	r25, r18
    295e:	f0 0d       	add	r31, r0
    2960:	83 9f       	mul	r24, r19
    2962:	f0 0d       	add	r31, r0
    2964:	74 9f       	mul	r23, r20
    2966:	f0 0d       	add	r31, r0
    2968:	65 9f       	mul	r22, r21
    296a:	f0 0d       	add	r31, r0
    296c:	99 27       	eor	r25, r25
    296e:	72 9f       	mul	r23, r18
    2970:	b0 0d       	add	r27, r0
    2972:	e1 1d       	adc	r30, r1
    2974:	f9 1f       	adc	r31, r25
    2976:	63 9f       	mul	r22, r19
    2978:	b0 0d       	add	r27, r0
    297a:	e1 1d       	adc	r30, r1
    297c:	f9 1f       	adc	r31, r25
    297e:	bd 01       	movw	r22, r26
    2980:	cf 01       	movw	r24, r30
    2982:	11 24       	eor	r1, r1
    2984:	08 95       	ret

00002986 <__prologue_saves__>:
    2986:	2f 92       	push	r2
    2988:	3f 92       	push	r3
    298a:	4f 92       	push	r4
    298c:	5f 92       	push	r5
    298e:	6f 92       	push	r6
    2990:	7f 92       	push	r7
    2992:	8f 92       	push	r8
    2994:	9f 92       	push	r9
    2996:	af 92       	push	r10
    2998:	bf 92       	push	r11
    299a:	cf 92       	push	r12
    299c:	df 92       	push	r13
    299e:	ef 92       	push	r14
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	ca 1b       	sub	r28, r26
    29b0:	db 0b       	sbc	r29, r27
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	09 94       	ijmp

000029be <__epilogue_restores__>:
    29be:	2a 88       	ldd	r2, Y+18	; 0x12
    29c0:	39 88       	ldd	r3, Y+17	; 0x11
    29c2:	48 88       	ldd	r4, Y+16	; 0x10
    29c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    29cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d0:	b9 84       	ldd	r11, Y+9	; 0x09
    29d2:	c8 84       	ldd	r12, Y+8	; 0x08
    29d4:	df 80       	ldd	r13, Y+7	; 0x07
    29d6:	ee 80       	ldd	r14, Y+6	; 0x06
    29d8:	fd 80       	ldd	r15, Y+5	; 0x05
    29da:	0c 81       	ldd	r16, Y+4	; 0x04
    29dc:	1b 81       	ldd	r17, Y+3	; 0x03
    29de:	aa 81       	ldd	r26, Y+2	; 0x02
    29e0:	b9 81       	ldd	r27, Y+1	; 0x01
    29e2:	ce 0f       	add	r28, r30
    29e4:	d1 1d       	adc	r29, r1
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	ed 01       	movw	r28, r26
    29f2:	08 95       	ret

000029f4 <dtostrf>:
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	f2 2f       	mov	r31, r18
    29fe:	f0 2e       	mov	r15, r16
    2a00:	47 fd       	sbrc	r20, 7
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <dtostrf+0x14>
    2a04:	e4 e0       	ldi	r30, 0x04	; 4
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <dtostrf+0x16>
    2a08:	e4 e1       	ldi	r30, 0x14	; 20
    2a0a:	24 2f       	mov	r18, r20
    2a0c:	33 27       	eor	r19, r19
    2a0e:	27 fd       	sbrc	r18, 7
    2a10:	30 95       	com	r19
    2a12:	37 ff       	sbrs	r19, 7
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <dtostrf+0x28>
    2a16:	30 95       	com	r19
    2a18:	21 95       	neg	r18
    2a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1c:	4f 2d       	mov	r20, r15
    2a1e:	51 2f       	mov	r21, r17
    2a20:	0f 2f       	mov	r16, r31
    2a22:	ee 2e       	mov	r14, r30
    2a24:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <dtoa_prf>
    2a28:	8f 2d       	mov	r24, r15
    2a2a:	91 2f       	mov	r25, r17
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	ff 90       	pop	r15
    2a32:	ef 90       	pop	r14
    2a34:	08 95       	ret

00002a36 <itoa>:
    2a36:	fb 01       	movw	r30, r22
    2a38:	9f 01       	movw	r18, r30
    2a3a:	e8 94       	clt
    2a3c:	42 30       	cpi	r20, 0x02	; 2
    2a3e:	c4 f0       	brlt	.+48     	; 0x2a70 <itoa+0x3a>
    2a40:	45 32       	cpi	r20, 0x25	; 37
    2a42:	b4 f4       	brge	.+44     	; 0x2a70 <itoa+0x3a>
    2a44:	4a 30       	cpi	r20, 0x0A	; 10
    2a46:	29 f4       	brne	.+10     	; 0x2a52 <itoa+0x1c>
    2a48:	97 fb       	bst	r25, 7
    2a4a:	1e f4       	brtc	.+6      	; 0x2a52 <itoa+0x1c>
    2a4c:	90 95       	com	r25
    2a4e:	81 95       	neg	r24
    2a50:	9f 4f       	sbci	r25, 0xFF	; 255
    2a52:	64 2f       	mov	r22, r20
    2a54:	77 27       	eor	r23, r23
    2a56:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__udivmodhi4>
    2a5a:	80 5d       	subi	r24, 0xD0	; 208
    2a5c:	8a 33       	cpi	r24, 0x3A	; 58
    2a5e:	0c f0       	brlt	.+2      	; 0x2a62 <itoa+0x2c>
    2a60:	89 5d       	subi	r24, 0xD9	; 217
    2a62:	81 93       	st	Z+, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	a1 f7       	brne	.-24     	; 0x2a52 <itoa+0x1c>
    2a6a:	16 f4       	brtc	.+4      	; 0x2a70 <itoa+0x3a>
    2a6c:	5d e2       	ldi	r21, 0x2D	; 45
    2a6e:	51 93       	st	Z+, r21
    2a70:	10 82       	st	Z, r1
    2a72:	c9 01       	movw	r24, r18
    2a74:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <strrev>

00002a78 <dtoa_prf>:
    2a78:	a9 e0       	ldi	r26, 0x09	; 9
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e2 e4       	ldi	r30, 0x42	; 66
    2a7e:	f5 e1       	ldi	r31, 0x15	; 21
    2a80:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__prologue_saves__+0x8>
    2a84:	6a 01       	movw	r12, r20
    2a86:	12 2f       	mov	r17, r18
    2a88:	a0 2e       	mov	r10, r16
    2a8a:	be 2c       	mov	r11, r14
    2a8c:	2b e3       	ldi	r18, 0x3B	; 59
    2a8e:	20 17       	cp	r18, r16
    2a90:	18 f4       	brcc	.+6      	; 0x2a98 <dtoa_prf+0x20>
    2a92:	2c e3       	ldi	r18, 0x3C	; 60
    2a94:	92 2e       	mov	r9, r18
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <dtoa_prf+0x24>
    2a98:	90 2e       	mov	r9, r16
    2a9a:	93 94       	inc	r9
    2a9c:	ae 01       	movw	r20, r28
    2a9e:	4f 5f       	subi	r20, 0xFF	; 255
    2aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa2:	27 e0       	ldi	r18, 0x07	; 7
    2aa4:	09 2d       	mov	r16, r9
    2aa6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__ftoa_engine>
    2aaa:	bc 01       	movw	r22, r24
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	e8 2e       	mov	r14, r24
    2ab0:	ff 24       	eor	r15, r15
    2ab2:	c7 01       	movw	r24, r14
    2ab4:	89 70       	andi	r24, 0x09	; 9
    2ab6:	90 70       	andi	r25, 0x00	; 0
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	11 f4       	brne	.+4      	; 0x2ac0 <dtoa_prf+0x48>
    2abc:	ad e2       	ldi	r26, 0x2D	; 45
    2abe:	09 c0       	rjmp	.+18     	; 0x2ad2 <dtoa_prf+0x5a>
    2ac0:	b1 fe       	sbrs	r11, 1
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <dtoa_prf+0x50>
    2ac4:	ab e2       	ldi	r26, 0x2B	; 43
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <dtoa_prf+0x5a>
    2ac8:	b0 fc       	sbrc	r11, 0
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <dtoa_prf+0x58>
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	01 c0       	rjmp	.+2      	; 0x2ad2 <dtoa_prf+0x5a>
    2ad0:	a0 e2       	ldi	r26, 0x20	; 32
    2ad2:	e3 fe       	sbrs	r14, 3
    2ad4:	3b c0       	rjmp	.+118    	; 0x2b4c <dtoa_prf+0xd4>
    2ad6:	aa 23       	and	r26, r26
    2ad8:	11 f4       	brne	.+4      	; 0x2ade <dtoa_prf+0x66>
    2ada:	23 e0       	ldi	r18, 0x03	; 3
    2adc:	01 c0       	rjmp	.+2      	; 0x2ae0 <dtoa_prf+0x68>
    2ade:	24 e0       	ldi	r18, 0x04	; 4
    2ae0:	21 17       	cp	r18, r17
    2ae2:	10 f0       	brcs	.+4      	; 0x2ae8 <dtoa_prf+0x70>
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <dtoa_prf+0x74>
    2ae8:	12 1b       	sub	r17, r18
    2aea:	21 2f       	mov	r18, r17
    2aec:	eb 2c       	mov	r14, r11
    2aee:	b4 fe       	sbrs	r11, 4
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <dtoa_prf+0x7e>
    2af2:	32 2f       	mov	r19, r18
    2af4:	0a c0       	rjmp	.+20     	; 0x2b0a <dtoa_prf+0x92>
    2af6:	f6 01       	movw	r30, r12
    2af8:	32 2f       	mov	r19, r18
    2afa:	80 e2       	ldi	r24, 0x20	; 32
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <dtoa_prf+0x8a>
    2afe:	81 93       	st	Z+, r24
    2b00:	31 50       	subi	r19, 0x01	; 1
    2b02:	33 23       	and	r19, r19
    2b04:	e1 f7       	brne	.-8      	; 0x2afe <dtoa_prf+0x86>
    2b06:	c2 0e       	add	r12, r18
    2b08:	d1 1c       	adc	r13, r1
    2b0a:	aa 23       	and	r26, r26
    2b0c:	19 f0       	breq	.+6      	; 0x2b14 <dtoa_prf+0x9c>
    2b0e:	f6 01       	movw	r30, r12
    2b10:	a1 93       	st	Z+, r26
    2b12:	6f 01       	movw	r12, r30
    2b14:	f6 01       	movw	r30, r12
    2b16:	31 96       	adiw	r30, 0x01	; 1
    2b18:	e2 fe       	sbrs	r14, 2
    2b1a:	05 c0       	rjmp	.+10     	; 0x2b26 <dtoa_prf+0xae>
    2b1c:	9e e4       	ldi	r25, 0x4E	; 78
    2b1e:	d6 01       	movw	r26, r12
    2b20:	9c 93       	st	X, r25
    2b22:	81 e4       	ldi	r24, 0x41	; 65
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <dtoa_prf+0xb6>
    2b26:	9e e6       	ldi	r25, 0x6E	; 110
    2b28:	d6 01       	movw	r26, r12
    2b2a:	9c 93       	st	X, r25
    2b2c:	81 e6       	ldi	r24, 0x61	; 97
    2b2e:	11 96       	adiw	r26, 0x01	; 1
    2b30:	8c 93       	st	X, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	32 96       	adiw	r30, 0x02	; 2
    2b36:	df 01       	movw	r26, r30
    2b38:	83 2f       	mov	r24, r19
    2b3a:	90 e2       	ldi	r25, 0x20	; 32
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <dtoa_prf+0xca>
    2b3e:	9d 93       	st	X+, r25
    2b40:	81 50       	subi	r24, 0x01	; 1
    2b42:	88 23       	and	r24, r24
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <dtoa_prf+0xc6>
    2b46:	e3 0f       	add	r30, r19
    2b48:	f1 1d       	adc	r31, r1
    2b4a:	40 c0       	rjmp	.+128    	; 0x2bcc <dtoa_prf+0x154>
    2b4c:	e2 fe       	sbrs	r14, 2
    2b4e:	42 c0       	rjmp	.+132    	; 0x2bd4 <dtoa_prf+0x15c>
    2b50:	aa 23       	and	r26, r26
    2b52:	11 f4       	brne	.+4      	; 0x2b58 <dtoa_prf+0xe0>
    2b54:	23 e0       	ldi	r18, 0x03	; 3
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <dtoa_prf+0xe2>
    2b58:	24 e0       	ldi	r18, 0x04	; 4
    2b5a:	21 17       	cp	r18, r17
    2b5c:	10 f0       	brcs	.+4      	; 0x2b62 <dtoa_prf+0xea>
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <dtoa_prf+0xee>
    2b62:	12 1b       	sub	r17, r18
    2b64:	21 2f       	mov	r18, r17
    2b66:	eb 2c       	mov	r14, r11
    2b68:	b4 fe       	sbrs	r11, 4
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <dtoa_prf+0xf8>
    2b6c:	92 2f       	mov	r25, r18
    2b6e:	0a c0       	rjmp	.+20     	; 0x2b84 <dtoa_prf+0x10c>
    2b70:	f6 01       	movw	r30, r12
    2b72:	92 2f       	mov	r25, r18
    2b74:	80 e2       	ldi	r24, 0x20	; 32
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <dtoa_prf+0x104>
    2b78:	81 93       	st	Z+, r24
    2b7a:	91 50       	subi	r25, 0x01	; 1
    2b7c:	99 23       	and	r25, r25
    2b7e:	e1 f7       	brne	.-8      	; 0x2b78 <dtoa_prf+0x100>
    2b80:	c2 0e       	add	r12, r18
    2b82:	d1 1c       	adc	r13, r1
    2b84:	aa 23       	and	r26, r26
    2b86:	19 f0       	breq	.+6      	; 0x2b8e <dtoa_prf+0x116>
    2b88:	f6 01       	movw	r30, r12
    2b8a:	a1 93       	st	Z+, r26
    2b8c:	6f 01       	movw	r12, r30
    2b8e:	f6 01       	movw	r30, r12
    2b90:	31 96       	adiw	r30, 0x01	; 1
    2b92:	e2 fe       	sbrs	r14, 2
    2b94:	08 c0       	rjmp	.+16     	; 0x2ba6 <dtoa_prf+0x12e>
    2b96:	89 e4       	ldi	r24, 0x49	; 73
    2b98:	d6 01       	movw	r26, r12
    2b9a:	8c 93       	st	X, r24
    2b9c:	8e e4       	ldi	r24, 0x4E	; 78
    2b9e:	11 96       	adiw	r26, 0x01	; 1
    2ba0:	8c 93       	st	X, r24
    2ba2:	86 e4       	ldi	r24, 0x46	; 70
    2ba4:	07 c0       	rjmp	.+14     	; 0x2bb4 <dtoa_prf+0x13c>
    2ba6:	89 e6       	ldi	r24, 0x69	; 105
    2ba8:	d6 01       	movw	r26, r12
    2baa:	8c 93       	st	X, r24
    2bac:	8e e6       	ldi	r24, 0x6E	; 110
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	8c 93       	st	X, r24
    2bb2:	86 e6       	ldi	r24, 0x66	; 102
    2bb4:	81 83       	std	Z+1, r24	; 0x01
    2bb6:	32 96       	adiw	r30, 0x02	; 2
    2bb8:	df 01       	movw	r26, r30
    2bba:	89 2f       	mov	r24, r25
    2bbc:	20 e2       	ldi	r18, 0x20	; 32
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <dtoa_prf+0x14c>
    2bc0:	2d 93       	st	X+, r18
    2bc2:	81 50       	subi	r24, 0x01	; 1
    2bc4:	88 23       	and	r24, r24
    2bc6:	e1 f7       	brne	.-8      	; 0x2bc0 <dtoa_prf+0x148>
    2bc8:	e9 0f       	add	r30, r25
    2bca:	f1 1d       	adc	r31, r1
    2bcc:	10 82       	st	Z, r1
    2bce:	2e ef       	ldi	r18, 0xFE	; 254
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	af c0       	rjmp	.+350    	; 0x2d32 <dtoa_prf+0x2ba>
    2bd4:	16 16       	cp	r1, r22
    2bd6:	17 06       	cpc	r1, r23
    2bd8:	1c f0       	brlt	.+6      	; 0x2be0 <dtoa_prf+0x168>
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <dtoa_prf+0x16e>
    2be0:	ab 01       	movw	r20, r22
    2be2:	4f 5f       	subi	r20, 0xFF	; 255
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	aa 20       	and	r10, r10
    2be8:	19 f4       	brne	.+6      	; 0x2bf0 <dtoa_prf+0x178>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <dtoa_prf+0x17e>
    2bf0:	8a 2d       	mov	r24, r10
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	aa 23       	and	r26, r26
    2bfc:	11 f0       	breq	.+4      	; 0x2c02 <dtoa_prf+0x18a>
    2bfe:	21 e0       	ldi	r18, 0x01	; 1
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	24 0f       	add	r18, r20
    2c04:	35 1f       	adc	r19, r21
    2c06:	28 0f       	add	r18, r24
    2c08:	39 1f       	adc	r19, r25
    2c0a:	81 2f       	mov	r24, r17
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	28 17       	cp	r18, r24
    2c10:	39 07       	cpc	r19, r25
    2c12:	14 f0       	brlt	.+4      	; 0x2c18 <dtoa_prf+0x1a0>
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <dtoa_prf+0x1a4>
    2c18:	12 1b       	sub	r17, r18
    2c1a:	21 2f       	mov	r18, r17
    2c1c:	4b 2d       	mov	r20, r11
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	ca 01       	movw	r24, r20
    2c22:	80 71       	andi	r24, 0x10	; 16
    2c24:	90 70       	andi	r25, 0x00	; 0
    2c26:	b4 fc       	sbrc	r11, 4
    2c28:	0d c0       	rjmp	.+26     	; 0x2c44 <dtoa_prf+0x1cc>
    2c2a:	b3 fc       	sbrc	r11, 3
    2c2c:	0b c0       	rjmp	.+22     	; 0x2c44 <dtoa_prf+0x1cc>
    2c2e:	f6 01       	movw	r30, r12
    2c30:	32 2f       	mov	r19, r18
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <dtoa_prf+0x1c2>
    2c36:	41 93       	st	Z+, r20
    2c38:	31 50       	subi	r19, 0x01	; 1
    2c3a:	33 23       	and	r19, r19
    2c3c:	e1 f7       	brne	.-8      	; 0x2c36 <dtoa_prf+0x1be>
    2c3e:	c2 0e       	add	r12, r18
    2c40:	d1 1c       	adc	r13, r1
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <dtoa_prf+0x1ce>
    2c44:	32 2f       	mov	r19, r18
    2c46:	aa 23       	and	r26, r26
    2c48:	19 f0       	breq	.+6      	; 0x2c50 <dtoa_prf+0x1d8>
    2c4a:	f6 01       	movw	r30, r12
    2c4c:	a1 93       	st	Z+, r26
    2c4e:	6f 01       	movw	r12, r30
    2c50:	89 2b       	or	r24, r25
    2c52:	11 f0       	breq	.+4      	; 0x2c58 <dtoa_prf+0x1e0>
    2c54:	13 2f       	mov	r17, r19
    2c56:	0a c0       	rjmp	.+20     	; 0x2c6c <dtoa_prf+0x1f4>
    2c58:	f6 01       	movw	r30, r12
    2c5a:	13 2f       	mov	r17, r19
    2c5c:	80 e3       	ldi	r24, 0x30	; 48
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <dtoa_prf+0x1ec>
    2c60:	81 93       	st	Z+, r24
    2c62:	11 50       	subi	r17, 0x01	; 1
    2c64:	11 23       	and	r17, r17
    2c66:	e1 f7       	brne	.-8      	; 0x2c60 <dtoa_prf+0x1e8>
    2c68:	c3 0e       	add	r12, r19
    2c6a:	d1 1c       	adc	r13, r1
    2c6c:	09 2d       	mov	r16, r9
    2c6e:	06 0f       	add	r16, r22
    2c70:	ba 80       	ldd	r11, Y+2	; 0x02
    2c72:	90 e1       	ldi	r25, 0x10	; 16
    2c74:	89 2e       	mov	r8, r25
    2c76:	91 2c       	mov	r9, r1
    2c78:	8e 20       	and	r8, r14
    2c7a:	9f 20       	and	r9, r15
    2c7c:	e4 fe       	sbrs	r14, 4
    2c7e:	04 c0       	rjmp	.+8      	; 0x2c88 <dtoa_prf+0x210>
    2c80:	f1 e3       	ldi	r31, 0x31	; 49
    2c82:	bf 16       	cp	r11, r31
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <dtoa_prf+0x210>
    2c86:	01 50       	subi	r16, 0x01	; 1
    2c88:	10 16       	cp	r1, r16
    2c8a:	14 f0       	brlt	.+4      	; 0x2c90 <dtoa_prf+0x218>
    2c8c:	01 e0       	ldi	r16, 0x01	; 1
    2c8e:	03 c0       	rjmp	.+6      	; 0x2c96 <dtoa_prf+0x21e>
    2c90:	09 30       	cpi	r16, 0x09	; 9
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <dtoa_prf+0x21e>
    2c94:	08 e0       	ldi	r16, 0x08	; 8
    2c96:	9b 01       	movw	r18, r22
    2c98:	77 ff       	sbrs	r23, 7
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <dtoa_prf+0x228>
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	82 1b       	sub	r24, r18
    2ca6:	93 0b       	sbc	r25, r19
    2ca8:	fe 01       	movw	r30, r28
    2caa:	31 96       	adiw	r30, 0x01	; 1
    2cac:	e8 0f       	add	r30, r24
    2cae:	f9 1f       	adc	r31, r25
    2cb0:	8e e2       	ldi	r24, 0x2E	; 46
    2cb2:	f8 2e       	mov	r15, r24
    2cb4:	3b 01       	movw	r6, r22
    2cb6:	60 1a       	sub	r6, r16
    2cb8:	71 08       	sbc	r7, r1
    2cba:	8a 2d       	mov	r24, r10
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	44 27       	eor	r20, r20
    2cc0:	55 27       	eor	r21, r21
    2cc2:	48 1b       	sub	r20, r24
    2cc4:	59 0b       	sbc	r21, r25
    2cc6:	8f ef       	ldi	r24, 0xFF	; 255
    2cc8:	2f 3f       	cpi	r18, 0xFF	; 255
    2cca:	38 07       	cpc	r19, r24
    2ccc:	19 f4       	brne	.+6      	; 0x2cd4 <dtoa_prf+0x25c>
    2cce:	d6 01       	movw	r26, r12
    2cd0:	fd 92       	st	X+, r15
    2cd2:	6d 01       	movw	r12, r26
    2cd4:	62 17       	cp	r22, r18
    2cd6:	73 07       	cpc	r23, r19
    2cd8:	2c f0       	brlt	.+10     	; 0x2ce4 <dtoa_prf+0x26c>
    2cda:	62 16       	cp	r6, r18
    2cdc:	73 06       	cpc	r7, r19
    2cde:	14 f4       	brge	.+4      	; 0x2ce4 <dtoa_prf+0x26c>
    2ce0:	80 81       	ld	r24, Z
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <dtoa_prf+0x26e>
    2ce4:	80 e3       	ldi	r24, 0x30	; 48
    2ce6:	21 50       	subi	r18, 0x01	; 1
    2ce8:	30 40       	sbci	r19, 0x00	; 0
    2cea:	31 96       	adiw	r30, 0x01	; 1
    2cec:	24 17       	cp	r18, r20
    2cee:	35 07       	cpc	r19, r21
    2cf0:	24 f0       	brlt	.+8      	; 0x2cfa <dtoa_prf+0x282>
    2cf2:	d6 01       	movw	r26, r12
    2cf4:	8d 93       	st	X+, r24
    2cf6:	6d 01       	movw	r12, r26
    2cf8:	e6 cf       	rjmp	.-52     	; 0x2cc6 <dtoa_prf+0x24e>
    2cfa:	26 17       	cp	r18, r22
    2cfc:	37 07       	cpc	r19, r23
    2cfe:	49 f4       	brne	.+18     	; 0x2d12 <dtoa_prf+0x29a>
    2d00:	b5 e3       	ldi	r27, 0x35	; 53
    2d02:	bb 15       	cp	r27, r11
    2d04:	28 f0       	brcs	.+10     	; 0x2d10 <dtoa_prf+0x298>
    2d06:	bb 16       	cp	r11, r27
    2d08:	21 f4       	brne	.+8      	; 0x2d12 <dtoa_prf+0x29a>
    2d0a:	81 14       	cp	r8, r1
    2d0c:	91 04       	cpc	r9, r1
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <dtoa_prf+0x29a>
    2d10:	81 e3       	ldi	r24, 0x31	; 49
    2d12:	f6 01       	movw	r30, r12
    2d14:	81 93       	st	Z+, r24
    2d16:	d6 01       	movw	r26, r12
    2d18:	81 2f       	mov	r24, r17
    2d1a:	90 e2       	ldi	r25, 0x20	; 32
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <dtoa_prf+0x2aa>
    2d1e:	9c 93       	st	X, r25
    2d20:	81 50       	subi	r24, 0x01	; 1
    2d22:	11 96       	adiw	r26, 0x01	; 1
    2d24:	88 23       	and	r24, r24
    2d26:	d9 f7       	brne	.-10     	; 0x2d1e <dtoa_prf+0x2a6>
    2d28:	e1 0f       	add	r30, r17
    2d2a:	f1 1d       	adc	r31, r1
    2d2c:	10 82       	st	Z, r1
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	c9 01       	movw	r24, r18
    2d34:	29 96       	adiw	r28, 0x09	; 9
    2d36:	ee e0       	ldi	r30, 0x0E	; 14
    2d38:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__epilogue_restores__+0x8>

00002d3c <__ftoa_engine>:
    2d3c:	28 30       	cpi	r18, 0x08	; 8
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <__ftoa_engine+0x6>
    2d40:	27 e0       	ldi	r18, 0x07	; 7
    2d42:	33 27       	eor	r19, r19
    2d44:	da 01       	movw	r26, r20
    2d46:	99 0f       	add	r25, r25
    2d48:	31 1d       	adc	r19, r1
    2d4a:	87 fd       	sbrc	r24, 7
    2d4c:	91 60       	ori	r25, 0x01	; 1
    2d4e:	00 96       	adiw	r24, 0x00	; 0
    2d50:	61 05       	cpc	r22, r1
    2d52:	71 05       	cpc	r23, r1
    2d54:	39 f4       	brne	.+14     	; 0x2d64 <__ftoa_engine+0x28>
    2d56:	32 60       	ori	r19, 0x02	; 2
    2d58:	2e 5f       	subi	r18, 0xFE	; 254
    2d5a:	3d 93       	st	X+, r19
    2d5c:	30 e3       	ldi	r19, 0x30	; 48
    2d5e:	2a 95       	dec	r18
    2d60:	e1 f7       	brne	.-8      	; 0x2d5a <__ftoa_engine+0x1e>
    2d62:	08 95       	ret
    2d64:	9f 3f       	cpi	r25, 0xFF	; 255
    2d66:	30 f0       	brcs	.+12     	; 0x2d74 <__ftoa_engine+0x38>
    2d68:	80 38       	cpi	r24, 0x80	; 128
    2d6a:	71 05       	cpc	r23, r1
    2d6c:	61 05       	cpc	r22, r1
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <__ftoa_engine+0x36>
    2d70:	3c 5f       	subi	r19, 0xFC	; 252
    2d72:	3c 5f       	subi	r19, 0xFC	; 252
    2d74:	3d 93       	st	X+, r19
    2d76:	91 30       	cpi	r25, 0x01	; 1
    2d78:	08 f0       	brcs	.+2      	; 0x2d7c <__ftoa_engine+0x40>
    2d7a:	80 68       	ori	r24, 0x80	; 128
    2d7c:	91 1d       	adc	r25, r1
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	1f 93       	push	r17
    2d84:	0f 93       	push	r16
    2d86:	ff 92       	push	r15
    2d88:	ef 92       	push	r14
    2d8a:	19 2f       	mov	r17, r25
    2d8c:	98 7f       	andi	r25, 0xF8	; 248
    2d8e:	96 95       	lsr	r25
    2d90:	e9 2f       	mov	r30, r25
    2d92:	96 95       	lsr	r25
    2d94:	96 95       	lsr	r25
    2d96:	e9 0f       	add	r30, r25
    2d98:	ff 27       	eor	r31, r31
    2d9a:	e2 55       	subi	r30, 0x52	; 82
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	99 27       	eor	r25, r25
    2da0:	33 27       	eor	r19, r19
    2da2:	ee 24       	eor	r14, r14
    2da4:	ff 24       	eor	r15, r15
    2da6:	a7 01       	movw	r20, r14
    2da8:	e7 01       	movw	r28, r14
    2daa:	05 90       	lpm	r0, Z+
    2dac:	08 94       	sec
    2dae:	07 94       	ror	r0
    2db0:	28 f4       	brcc	.+10     	; 0x2dbc <__ftoa_engine+0x80>
    2db2:	36 0f       	add	r19, r22
    2db4:	e7 1e       	adc	r14, r23
    2db6:	f8 1e       	adc	r15, r24
    2db8:	49 1f       	adc	r20, r25
    2dba:	51 1d       	adc	r21, r1
    2dbc:	66 0f       	add	r22, r22
    2dbe:	77 1f       	adc	r23, r23
    2dc0:	88 1f       	adc	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	06 94       	lsr	r0
    2dc6:	a1 f7       	brne	.-24     	; 0x2db0 <__ftoa_engine+0x74>
    2dc8:	05 90       	lpm	r0, Z+
    2dca:	07 94       	ror	r0
    2dcc:	28 f4       	brcc	.+10     	; 0x2dd8 <__ftoa_engine+0x9c>
    2dce:	e7 0e       	add	r14, r23
    2dd0:	f8 1e       	adc	r15, r24
    2dd2:	49 1f       	adc	r20, r25
    2dd4:	56 1f       	adc	r21, r22
    2dd6:	c1 1d       	adc	r28, r1
    2dd8:	77 0f       	add	r23, r23
    2dda:	88 1f       	adc	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	66 1f       	adc	r22, r22
    2de0:	06 94       	lsr	r0
    2de2:	a1 f7       	brne	.-24     	; 0x2dcc <__ftoa_engine+0x90>
    2de4:	05 90       	lpm	r0, Z+
    2de6:	07 94       	ror	r0
    2de8:	28 f4       	brcc	.+10     	; 0x2df4 <__ftoa_engine+0xb8>
    2dea:	f8 0e       	add	r15, r24
    2dec:	49 1f       	adc	r20, r25
    2dee:	56 1f       	adc	r21, r22
    2df0:	c7 1f       	adc	r28, r23
    2df2:	d1 1d       	adc	r29, r1
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	66 1f       	adc	r22, r22
    2dfa:	77 1f       	adc	r23, r23
    2dfc:	06 94       	lsr	r0
    2dfe:	a1 f7       	brne	.-24     	; 0x2de8 <__ftoa_engine+0xac>
    2e00:	05 90       	lpm	r0, Z+
    2e02:	07 94       	ror	r0
    2e04:	20 f4       	brcc	.+8      	; 0x2e0e <__ftoa_engine+0xd2>
    2e06:	49 0f       	add	r20, r25
    2e08:	56 1f       	adc	r21, r22
    2e0a:	c7 1f       	adc	r28, r23
    2e0c:	d8 1f       	adc	r29, r24
    2e0e:	99 0f       	add	r25, r25
    2e10:	66 1f       	adc	r22, r22
    2e12:	77 1f       	adc	r23, r23
    2e14:	88 1f       	adc	r24, r24
    2e16:	06 94       	lsr	r0
    2e18:	a9 f7       	brne	.-22     	; 0x2e04 <__ftoa_engine+0xc8>
    2e1a:	84 91       	lpm	r24, Z+
    2e1c:	10 95       	com	r17
    2e1e:	17 70       	andi	r17, 0x07	; 7
    2e20:	41 f0       	breq	.+16     	; 0x2e32 <__ftoa_engine+0xf6>
    2e22:	d6 95       	lsr	r29
    2e24:	c7 95       	ror	r28
    2e26:	57 95       	ror	r21
    2e28:	47 95       	ror	r20
    2e2a:	f7 94       	ror	r15
    2e2c:	e7 94       	ror	r14
    2e2e:	1a 95       	dec	r17
    2e30:	c1 f7       	brne	.-16     	; 0x2e22 <__ftoa_engine+0xe6>
    2e32:	e4 e5       	ldi	r30, 0x54	; 84
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	68 94       	set
    2e38:	15 90       	lpm	r1, Z+
    2e3a:	15 91       	lpm	r17, Z+
    2e3c:	35 91       	lpm	r19, Z+
    2e3e:	65 91       	lpm	r22, Z+
    2e40:	95 91       	lpm	r25, Z+
    2e42:	05 90       	lpm	r0, Z+
    2e44:	7f e2       	ldi	r23, 0x2F	; 47
    2e46:	73 95       	inc	r23
    2e48:	e1 18       	sub	r14, r1
    2e4a:	f1 0a       	sbc	r15, r17
    2e4c:	43 0b       	sbc	r20, r19
    2e4e:	56 0b       	sbc	r21, r22
    2e50:	c9 0b       	sbc	r28, r25
    2e52:	d0 09       	sbc	r29, r0
    2e54:	c0 f7       	brcc	.-16     	; 0x2e46 <__ftoa_engine+0x10a>
    2e56:	e1 0c       	add	r14, r1
    2e58:	f1 1e       	adc	r15, r17
    2e5a:	43 1f       	adc	r20, r19
    2e5c:	56 1f       	adc	r21, r22
    2e5e:	c9 1f       	adc	r28, r25
    2e60:	d0 1d       	adc	r29, r0
    2e62:	7e f4       	brtc	.+30     	; 0x2e82 <__ftoa_engine+0x146>
    2e64:	70 33       	cpi	r23, 0x30	; 48
    2e66:	11 f4       	brne	.+4      	; 0x2e6c <__ftoa_engine+0x130>
    2e68:	8a 95       	dec	r24
    2e6a:	e6 cf       	rjmp	.-52     	; 0x2e38 <__ftoa_engine+0xfc>
    2e6c:	e8 94       	clt
    2e6e:	01 50       	subi	r16, 0x01	; 1
    2e70:	30 f0       	brcs	.+12     	; 0x2e7e <__ftoa_engine+0x142>
    2e72:	08 0f       	add	r16, r24
    2e74:	0a f4       	brpl	.+2      	; 0x2e78 <__ftoa_engine+0x13c>
    2e76:	00 27       	eor	r16, r16
    2e78:	02 17       	cp	r16, r18
    2e7a:	08 f4       	brcc	.+2      	; 0x2e7e <__ftoa_engine+0x142>
    2e7c:	20 2f       	mov	r18, r16
    2e7e:	23 95       	inc	r18
    2e80:	02 2f       	mov	r16, r18
    2e82:	7a 33       	cpi	r23, 0x3A	; 58
    2e84:	28 f0       	brcs	.+10     	; 0x2e90 <__ftoa_engine+0x154>
    2e86:	79 e3       	ldi	r23, 0x39	; 57
    2e88:	7d 93       	st	X+, r23
    2e8a:	2a 95       	dec	r18
    2e8c:	e9 f7       	brne	.-6      	; 0x2e88 <__ftoa_engine+0x14c>
    2e8e:	10 c0       	rjmp	.+32     	; 0x2eb0 <__ftoa_engine+0x174>
    2e90:	7d 93       	st	X+, r23
    2e92:	2a 95       	dec	r18
    2e94:	89 f6       	brne	.-94     	; 0x2e38 <__ftoa_engine+0xfc>
    2e96:	06 94       	lsr	r0
    2e98:	97 95       	ror	r25
    2e9a:	67 95       	ror	r22
    2e9c:	37 95       	ror	r19
    2e9e:	17 95       	ror	r17
    2ea0:	17 94       	ror	r1
    2ea2:	e1 18       	sub	r14, r1
    2ea4:	f1 0a       	sbc	r15, r17
    2ea6:	43 0b       	sbc	r20, r19
    2ea8:	56 0b       	sbc	r21, r22
    2eaa:	c9 0b       	sbc	r28, r25
    2eac:	d0 09       	sbc	r29, r0
    2eae:	98 f0       	brcs	.+38     	; 0x2ed6 <__ftoa_engine+0x19a>
    2eb0:	23 95       	inc	r18
    2eb2:	7e 91       	ld	r23, -X
    2eb4:	73 95       	inc	r23
    2eb6:	7a 33       	cpi	r23, 0x3A	; 58
    2eb8:	08 f0       	brcs	.+2      	; 0x2ebc <__ftoa_engine+0x180>
    2eba:	70 e3       	ldi	r23, 0x30	; 48
    2ebc:	7c 93       	st	X, r23
    2ebe:	20 13       	cpse	r18, r16
    2ec0:	b8 f7       	brcc	.-18     	; 0x2eb0 <__ftoa_engine+0x174>
    2ec2:	7e 91       	ld	r23, -X
    2ec4:	70 61       	ori	r23, 0x10	; 16
    2ec6:	7d 93       	st	X+, r23
    2ec8:	30 f0       	brcs	.+12     	; 0x2ed6 <__ftoa_engine+0x19a>
    2eca:	83 95       	inc	r24
    2ecc:	71 e3       	ldi	r23, 0x31	; 49
    2ece:	7d 93       	st	X+, r23
    2ed0:	70 e3       	ldi	r23, 0x30	; 48
    2ed2:	2a 95       	dec	r18
    2ed4:	e1 f7       	brne	.-8      	; 0x2ece <__ftoa_engine+0x192>
    2ed6:	11 24       	eor	r1, r1
    2ed8:	ef 90       	pop	r14
    2eda:	ff 90       	pop	r15
    2edc:	0f 91       	pop	r16
    2ede:	1f 91       	pop	r17
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	99 27       	eor	r25, r25
    2ee6:	87 fd       	sbrc	r24, 7
    2ee8:	90 95       	com	r25
    2eea:	08 95       	ret

00002eec <strrev>:
    2eec:	dc 01       	movw	r26, r24
    2eee:	fc 01       	movw	r30, r24
    2ef0:	67 2f       	mov	r22, r23
    2ef2:	71 91       	ld	r23, Z+
    2ef4:	77 23       	and	r23, r23
    2ef6:	e1 f7       	brne	.-8      	; 0x2ef0 <strrev+0x4>
    2ef8:	32 97       	sbiw	r30, 0x02	; 2
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <strrev+0x18>
    2efc:	7c 91       	ld	r23, X
    2efe:	6d 93       	st	X+, r22
    2f00:	70 83       	st	Z, r23
    2f02:	62 91       	ld	r22, -Z
    2f04:	ae 17       	cp	r26, r30
    2f06:	bf 07       	cpc	r27, r31
    2f08:	c8 f3       	brcs	.-14     	; 0x2efc <strrev+0x10>
    2f0a:	08 95       	ret

00002f0c <__udivmodhi4>:
    2f0c:	aa 1b       	sub	r26, r26
    2f0e:	bb 1b       	sub	r27, r27
    2f10:	51 e1       	ldi	r21, 0x11	; 17
    2f12:	07 c0       	rjmp	.+14     	; 0x2f22 <__udivmodhi4_ep>

00002f14 <__udivmodhi4_loop>:
    2f14:	aa 1f       	adc	r26, r26
    2f16:	bb 1f       	adc	r27, r27
    2f18:	a6 17       	cp	r26, r22
    2f1a:	b7 07       	cpc	r27, r23
    2f1c:	10 f0       	brcs	.+4      	; 0x2f22 <__udivmodhi4_ep>
    2f1e:	a6 1b       	sub	r26, r22
    2f20:	b7 0b       	sbc	r27, r23

00002f22 <__udivmodhi4_ep>:
    2f22:	88 1f       	adc	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	5a 95       	dec	r21
    2f28:	a9 f7       	brne	.-22     	; 0x2f14 <__udivmodhi4_loop>
    2f2a:	80 95       	com	r24
    2f2c:	90 95       	com	r25
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	08 95       	ret

00002f34 <_exit>:
    2f34:	f8 94       	cli

00002f36 <__stop_program>:
    2f36:	ff cf       	rjmp	.-2      	; 0x2f36 <__stop_program>
